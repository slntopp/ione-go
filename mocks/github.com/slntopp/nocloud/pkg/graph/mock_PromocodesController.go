// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	promocodes "github.com/slntopp/nocloud-proto/billing/promocodes"
)

// MockPromocodesController is an autogenerated mock type for the PromocodesController type
type MockPromocodesController struct {
	mock.Mock
}

type MockPromocodesController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPromocodesController) EXPECT() *MockPromocodesController_Expecter {
	return &MockPromocodesController_Expecter{mock: &_m.Mock}
}

// AddEntry provides a mock function with given fields: ctx, uuid, entry
func (_m *MockPromocodesController) AddEntry(ctx context.Context, uuid string, entry *promocodes.EntryResource) error {
	ret := _m.Called(ctx, uuid, entry)

	if len(ret) == 0 {
		panic("no return value specified for AddEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *promocodes.EntryResource) error); ok {
		r0 = rf(ctx, uuid, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromocodesController_AddEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntry'
type MockPromocodesController_AddEntry_Call struct {
	*mock.Call
}

// AddEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - entry *promocodes.EntryResource
func (_e *MockPromocodesController_Expecter) AddEntry(ctx interface{}, uuid interface{}, entry interface{}) *MockPromocodesController_AddEntry_Call {
	return &MockPromocodesController_AddEntry_Call{Call: _e.mock.On("AddEntry", ctx, uuid, entry)}
}

func (_c *MockPromocodesController_AddEntry_Call) Run(run func(ctx context.Context, uuid string, entry *promocodes.EntryResource)) *MockPromocodesController_AddEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*promocodes.EntryResource))
	})
	return _c
}

func (_c *MockPromocodesController_AddEntry_Call) Return(_a0 error) *MockPromocodesController_AddEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromocodesController_AddEntry_Call) RunAndReturn(run func(context.Context, string, *promocodes.EntryResource) error) *MockPromocodesController_AddEntry_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with given fields: ctx
func (_m *MockPromocodesController) Count(ctx context.Context) ([]*promocodes.Promocode, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 []*promocodes.Promocode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*promocodes.Promocode, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*promocodes.Promocode); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*promocodes.Promocode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromocodesController_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockPromocodesController_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPromocodesController_Expecter) Count(ctx interface{}) *MockPromocodesController_Count_Call {
	return &MockPromocodesController_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockPromocodesController_Count_Call) Run(run func(ctx context.Context)) *MockPromocodesController_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPromocodesController_Count_Call) Return(_a0 []*promocodes.Promocode, _a1 error) *MockPromocodesController_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromocodesController_Count_Call) RunAndReturn(run func(context.Context) ([]*promocodes.Promocode, error)) *MockPromocodesController_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, promo
func (_m *MockPromocodesController) Create(ctx context.Context, promo *promocodes.Promocode) (*promocodes.Promocode, error) {
	ret := _m.Called(ctx, promo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *promocodes.Promocode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *promocodes.Promocode) (*promocodes.Promocode, error)); ok {
		return rf(ctx, promo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *promocodes.Promocode) *promocodes.Promocode); ok {
		r0 = rf(ctx, promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promocodes.Promocode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *promocodes.Promocode) error); ok {
		r1 = rf(ctx, promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromocodesController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPromocodesController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - promo *promocodes.Promocode
func (_e *MockPromocodesController_Expecter) Create(ctx interface{}, promo interface{}) *MockPromocodesController_Create_Call {
	return &MockPromocodesController_Create_Call{Call: _e.mock.On("Create", ctx, promo)}
}

func (_c *MockPromocodesController_Create_Call) Run(run func(ctx context.Context, promo *promocodes.Promocode)) *MockPromocodesController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*promocodes.Promocode))
	})
	return _c
}

func (_c *MockPromocodesController_Create_Call) Return(_a0 *promocodes.Promocode, _a1 error) *MockPromocodesController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromocodesController_Create_Call) RunAndReturn(run func(context.Context, *promocodes.Promocode) (*promocodes.Promocode, error)) *MockPromocodesController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, uuid
func (_m *MockPromocodesController) Delete(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromocodesController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPromocodesController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPromocodesController_Expecter) Delete(ctx interface{}, uuid interface{}) *MockPromocodesController_Delete_Call {
	return &MockPromocodesController_Delete_Call{Call: _e.mock.On("Delete", ctx, uuid)}
}

func (_c *MockPromocodesController_Delete_Call) Run(run func(ctx context.Context, uuid string)) *MockPromocodesController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPromocodesController_Delete_Call) Return(_a0 error) *MockPromocodesController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromocodesController_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockPromocodesController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *MockPromocodesController) Get(ctx context.Context, uuid string) (*promocodes.Promocode, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *promocodes.Promocode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*promocodes.Promocode, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *promocodes.Promocode); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promocodes.Promocode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromocodesController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPromocodesController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPromocodesController_Expecter) Get(ctx interface{}, uuid interface{}) *MockPromocodesController_Get_Call {
	return &MockPromocodesController_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *MockPromocodesController_Get_Call) Run(run func(ctx context.Context, uuid string)) *MockPromocodesController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPromocodesController_Get_Call) Return(_a0 *promocodes.Promocode, _a1 error) *MockPromocodesController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromocodesController_Get_Call) RunAndReturn(run func(context.Context, string) (*promocodes.Promocode, error)) *MockPromocodesController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *MockPromocodesController) GetByCode(ctx context.Context, code string) (*promocodes.Promocode, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 *promocodes.Promocode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*promocodes.Promocode, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *promocodes.Promocode); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promocodes.Promocode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromocodesController_GetByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCode'
type MockPromocodesController_GetByCode_Call struct {
	*mock.Call
}

// GetByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockPromocodesController_Expecter) GetByCode(ctx interface{}, code interface{}) *MockPromocodesController_GetByCode_Call {
	return &MockPromocodesController_GetByCode_Call{Call: _e.mock.On("GetByCode", ctx, code)}
}

func (_c *MockPromocodesController_GetByCode_Call) Run(run func(ctx context.Context, code string)) *MockPromocodesController_GetByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPromocodesController_GetByCode_Call) Return(_a0 *promocodes.Promocode, _a1 error) *MockPromocodesController_GetByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromocodesController_GetByCode_Call) RunAndReturn(run func(context.Context, string) (*promocodes.Promocode, error)) *MockPromocodesController_GetByCode_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockPromocodesController) List(ctx context.Context, req *promocodes.ListPromocodesRequest) ([]*promocodes.Promocode, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*promocodes.Promocode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *promocodes.ListPromocodesRequest) ([]*promocodes.Promocode, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *promocodes.ListPromocodesRequest) []*promocodes.Promocode); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*promocodes.Promocode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *promocodes.ListPromocodesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromocodesController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPromocodesController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *promocodes.ListPromocodesRequest
func (_e *MockPromocodesController_Expecter) List(ctx interface{}, req interface{}) *MockPromocodesController_List_Call {
	return &MockPromocodesController_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockPromocodesController_List_Call) Run(run func(ctx context.Context, req *promocodes.ListPromocodesRequest)) *MockPromocodesController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*promocodes.ListPromocodesRequest))
	})
	return _c
}

func (_c *MockPromocodesController_List_Call) Return(_a0 []*promocodes.Promocode, _a1 error) *MockPromocodesController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromocodesController_List_Call) RunAndReturn(run func(context.Context, *promocodes.ListPromocodesRequest) ([]*promocodes.Promocode, error)) *MockPromocodesController_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, promo
func (_m *MockPromocodesController) Update(ctx context.Context, promo *promocodes.Promocode) (*promocodes.Promocode, error) {
	ret := _m.Called(ctx, promo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *promocodes.Promocode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *promocodes.Promocode) (*promocodes.Promocode, error)); ok {
		return rf(ctx, promo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *promocodes.Promocode) *promocodes.Promocode); ok {
		r0 = rf(ctx, promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*promocodes.Promocode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *promocodes.Promocode) error); ok {
		r1 = rf(ctx, promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromocodesController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPromocodesController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - promo *promocodes.Promocode
func (_e *MockPromocodesController_Expecter) Update(ctx interface{}, promo interface{}) *MockPromocodesController_Update_Call {
	return &MockPromocodesController_Update_Call{Call: _e.mock.On("Update", ctx, promo)}
}

func (_c *MockPromocodesController_Update_Call) Run(run func(ctx context.Context, promo *promocodes.Promocode)) *MockPromocodesController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*promocodes.Promocode))
	})
	return _c
}

func (_c *MockPromocodesController_Update_Call) Return(_a0 *promocodes.Promocode, _a1 error) *MockPromocodesController_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromocodesController_Update_Call) RunAndReturn(run func(context.Context, *promocodes.Promocode) (*promocodes.Promocode, error)) *MockPromocodesController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPromocodesController creates a new instance of MockPromocodesController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromocodesController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromocodesController {
	mock := &MockPromocodesController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
