// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	access "github.com/slntopp/nocloud-proto/access"

	graph "github.com/slntopp/nocloud/pkg/graph"

	mock "github.com/stretchr/testify/mock"

	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockNamespacesController is an autogenerated mock type for the NamespacesController type
type MockNamespacesController struct {
	mock.Mock
}

type MockNamespacesController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamespacesController) EXPECT() *MockNamespacesController_Expecter {
	return &MockNamespacesController_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, title
func (_m *MockNamespacesController) Create(ctx context.Context, title string) (graph.Namespace, error) {
	ret := _m.Called(ctx, title)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 graph.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (graph.Namespace, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) graph.Namespace); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(graph.Namespace)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNamespacesController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - title string
func (_e *MockNamespacesController_Expecter) Create(ctx interface{}, title interface{}) *MockNamespacesController_Create_Call {
	return &MockNamespacesController_Create_Call{Call: _e.mock.On("Create", ctx, title)}
}

func (_c *MockNamespacesController_Create_Call) Run(run func(ctx context.Context, title string)) *MockNamespacesController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNamespacesController_Create_Call) Return(_a0 graph.Namespace, _a1 error) *MockNamespacesController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesController_Create_Call) RunAndReturn(run func(context.Context, string) (graph.Namespace, error)) *MockNamespacesController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockNamespacesController) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamespacesController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNamespacesController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNamespacesController_Expecter) Delete(ctx interface{}, id interface{}) *MockNamespacesController_Delete_Call {
	return &MockNamespacesController_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockNamespacesController_Delete_Call) Run(run func(ctx context.Context, id string)) *MockNamespacesController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNamespacesController_Delete_Call) Return(_a0 error) *MockNamespacesController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamespacesController_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockNamespacesController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockNamespacesController) Get(ctx context.Context, id string) (graph.Namespace, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 graph.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (graph.Namespace, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) graph.Namespace); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(graph.Namespace)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNamespacesController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNamespacesController_Expecter) Get(ctx interface{}, id interface{}) *MockNamespacesController_Get_Call {
	return &MockNamespacesController_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockNamespacesController_Get_Call) Run(run func(ctx context.Context, id string)) *MockNamespacesController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNamespacesController_Get_Call) Return(_a0 graph.Namespace, _a1 error) *MockNamespacesController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesController_Get_Call) RunAndReturn(run func(context.Context, string) (graph.Namespace, error)) *MockNamespacesController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: ctx, acc, ns, _a3, role
func (_m *MockNamespacesController) Join(ctx context.Context, acc graph.Account, ns graph.Namespace, _a3 access.Level, role string) error {
	ret := _m.Called(ctx, acc, ns, _a3, role)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, graph.Namespace, access.Level, string) error); ok {
		r0 = rf(ctx, acc, ns, _a3, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamespacesController_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockNamespacesController_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - ctx context.Context
//   - acc graph.Account
//   - ns graph.Namespace
//   - _a3 access.Level
//   - role string
func (_e *MockNamespacesController_Expecter) Join(ctx interface{}, acc interface{}, ns interface{}, _a3 interface{}, role interface{}) *MockNamespacesController_Join_Call {
	return &MockNamespacesController_Join_Call{Call: _e.mock.On("Join", ctx, acc, ns, _a3, role)}
}

func (_c *MockNamespacesController_Join_Call) Run(run func(ctx context.Context, acc graph.Account, ns graph.Namespace, _a3 access.Level, role string)) *MockNamespacesController_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.Account), args[2].(graph.Namespace), args[3].(access.Level), args[4].(string))
	})
	return _c
}

func (_c *MockNamespacesController_Join_Call) Return(_a0 error) *MockNamespacesController_Join_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamespacesController_Join_Call) RunAndReturn(run func(context.Context, graph.Account, graph.Namespace, access.Level, string) error) *MockNamespacesController_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Link provides a mock function with given fields: ctx, acc, ns, _a3, role
func (_m *MockNamespacesController) Link(ctx context.Context, acc graph.Account, ns graph.Namespace, _a3 access.Level, role string) error {
	ret := _m.Called(ctx, acc, ns, _a3, role)

	if len(ret) == 0 {
		panic("no return value specified for Link")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, graph.Namespace, access.Level, string) error); ok {
		r0 = rf(ctx, acc, ns, _a3, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamespacesController_Link_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Link'
type MockNamespacesController_Link_Call struct {
	*mock.Call
}

// Link is a helper method to define mock.On call
//   - ctx context.Context
//   - acc graph.Account
//   - ns graph.Namespace
//   - _a3 access.Level
//   - role string
func (_e *MockNamespacesController_Expecter) Link(ctx interface{}, acc interface{}, ns interface{}, _a3 interface{}, role interface{}) *MockNamespacesController_Link_Call {
	return &MockNamespacesController_Link_Call{Call: _e.mock.On("Link", ctx, acc, ns, _a3, role)}
}

func (_c *MockNamespacesController_Link_Call) Run(run func(ctx context.Context, acc graph.Account, ns graph.Namespace, _a3 access.Level, role string)) *MockNamespacesController_Link_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.Account), args[2].(graph.Namespace), args[3].(access.Level), args[4].(string))
	})
	return _c
}

func (_c *MockNamespacesController_Link_Call) Return(_a0 error) *MockNamespacesController_Link_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamespacesController_Link_Call) RunAndReturn(run func(context.Context, graph.Account, graph.Namespace, access.Level, string) error) *MockNamespacesController_Link_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, requestor, req_depth, offset, limit, field, sort, filters
func (_m *MockNamespacesController) List(ctx context.Context, requestor graph.Account, req_depth int32, offset uint64, limit uint64, field string, sort string, filters map[string]*structpb.Value) (*graph.ListQueryResult[*graph.Namespace], error) {
	ret := _m.Called(ctx, requestor, req_depth, offset, limit, field, sort, filters)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *graph.ListQueryResult[*graph.Namespace]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, int32, uint64, uint64, string, string, map[string]*structpb.Value) (*graph.ListQueryResult[*graph.Namespace], error)); ok {
		return rf(ctx, requestor, req_depth, offset, limit, field, sort, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, int32, uint64, uint64, string, string, map[string]*structpb.Value) *graph.ListQueryResult[*graph.Namespace]); ok {
		r0 = rf(ctx, requestor, req_depth, offset, limit, field, sort, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.ListQueryResult[*graph.Namespace])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.Account, int32, uint64, uint64, string, string, map[string]*structpb.Value) error); ok {
		r1 = rf(ctx, requestor, req_depth, offset, limit, field, sort, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespacesController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockNamespacesController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - requestor graph.Account
//   - req_depth int32
//   - offset uint64
//   - limit uint64
//   - field string
//   - sort string
//   - filters map[string]*structpb.Value
func (_e *MockNamespacesController_Expecter) List(ctx interface{}, requestor interface{}, req_depth interface{}, offset interface{}, limit interface{}, field interface{}, sort interface{}, filters interface{}) *MockNamespacesController_List_Call {
	return &MockNamespacesController_List_Call{Call: _e.mock.On("List", ctx, requestor, req_depth, offset, limit, field, sort, filters)}
}

func (_c *MockNamespacesController_List_Call) Run(run func(ctx context.Context, requestor graph.Account, req_depth int32, offset uint64, limit uint64, field string, sort string, filters map[string]*structpb.Value)) *MockNamespacesController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.Account), args[2].(int32), args[3].(uint64), args[4].(uint64), args[5].(string), args[6].(string), args[7].(map[string]*structpb.Value))
	})
	return _c
}

func (_c *MockNamespacesController_List_Call) Return(_a0 *graph.ListQueryResult[*graph.Namespace], _a1 error) *MockNamespacesController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespacesController_List_Call) RunAndReturn(run func(context.Context, graph.Account, int32, uint64, uint64, string, string, map[string]*structpb.Value) (*graph.ListQueryResult[*graph.Namespace], error)) *MockNamespacesController_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, uuid, title
func (_m *MockNamespacesController) Patch(ctx context.Context, uuid string, title string) error {
	ret := _m.Called(ctx, uuid, title)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, uuid, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamespacesController_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockNamespacesController_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - title string
func (_e *MockNamespacesController_Expecter) Patch(ctx interface{}, uuid interface{}, title interface{}) *MockNamespacesController_Patch_Call {
	return &MockNamespacesController_Patch_Call{Call: _e.mock.On("Patch", ctx, uuid, title)}
}

func (_c *MockNamespacesController_Patch_Call) Run(run func(ctx context.Context, uuid string, title string)) *MockNamespacesController_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNamespacesController_Patch_Call) Return(_a0 error) *MockNamespacesController_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamespacesController_Patch_Call) RunAndReturn(run func(context.Context, string, string) error) *MockNamespacesController_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamespacesController creates a new instance of MockNamespacesController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamespacesController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamespacesController {
	mock := &MockNamespacesController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
