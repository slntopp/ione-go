// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	graph "github.com/slntopp/nocloud/pkg/graph"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockInvoicesController is an autogenerated mock type for the InvoicesController type
type MockInvoicesController struct {
	mock.Mock
}

type MockInvoicesController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInvoicesController) EXPECT() *MockInvoicesController_Expecter {
	return &MockInvoicesController_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, tx
func (_m *MockInvoicesController) Create(ctx context.Context, tx *graph.Invoice) (*graph.Invoice, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *graph.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *graph.Invoice) (*graph.Invoice, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *graph.Invoice) *graph.Invoice); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *graph.Invoice) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoicesController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockInvoicesController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *graph.Invoice
func (_e *MockInvoicesController_Expecter) Create(ctx interface{}, tx interface{}) *MockInvoicesController_Create_Call {
	return &MockInvoicesController_Create_Call{Call: _e.mock.On("Create", ctx, tx)}
}

func (_c *MockInvoicesController_Create_Call) Run(run func(ctx context.Context, tx *graph.Invoice)) *MockInvoicesController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*graph.Invoice))
	})
	return _c
}

func (_c *MockInvoicesController_Create_Call) Return(_a0 *graph.Invoice, _a1 error) *MockInvoicesController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoicesController_Create_Call) RunAndReturn(run func(context.Context, *graph.Invoice) (*graph.Invoice, error)) *MockInvoicesController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeInvoice provides a mock function with given fields: source, dest
func (_m *MockInvoicesController) DecodeInvoice(source interface{}, dest *graph.Invoice) error {
	ret := _m.Called(source, dest)

	if len(ret) == 0 {
		panic("no return value specified for DecodeInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, *graph.Invoice) error); ok {
		r0 = rf(source, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInvoicesController_DecodeInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeInvoice'
type MockInvoicesController_DecodeInvoice_Call struct {
	*mock.Call
}

// DecodeInvoice is a helper method to define mock.On call
//   - source interface{}
//   - dest *graph.Invoice
func (_e *MockInvoicesController_Expecter) DecodeInvoice(source interface{}, dest interface{}) *MockInvoicesController_DecodeInvoice_Call {
	return &MockInvoicesController_DecodeInvoice_Call{Call: _e.mock.On("DecodeInvoice", source, dest)}
}

func (_c *MockInvoicesController_DecodeInvoice_Call) Run(run func(source interface{}, dest *graph.Invoice)) *MockInvoicesController_DecodeInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(*graph.Invoice))
	})
	return _c
}

func (_c *MockInvoicesController_DecodeInvoice_Call) Return(_a0 error) *MockInvoicesController_DecodeInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInvoicesController_DecodeInvoice_Call) RunAndReturn(run func(interface{}, *graph.Invoice) error) *MockInvoicesController_DecodeInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *MockInvoicesController) Get(ctx context.Context, uuid string) (*graph.Invoice, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *graph.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*graph.Invoice, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *graph.Invoice); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoicesController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInvoicesController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockInvoicesController_Expecter) Get(ctx interface{}, uuid interface{}) *MockInvoicesController_Get_Call {
	return &MockInvoicesController_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *MockInvoicesController_Get_Call) Run(run func(ctx context.Context, uuid string)) *MockInvoicesController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInvoicesController_Get_Call) Return(_a0 *graph.Invoice, _a1 error) *MockInvoicesController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoicesController_Get_Call) RunAndReturn(run func(context.Context, string) (*graph.Invoice, error)) *MockInvoicesController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockInvoicesController) List(ctx context.Context) ([]*graph.Invoice, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*graph.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*graph.Invoice, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*graph.Invoice); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graph.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoicesController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockInvoicesController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInvoicesController_Expecter) List(ctx interface{}) *MockInvoicesController_List_Call {
	return &MockInvoicesController_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockInvoicesController_List_Call) Run(run func(ctx context.Context)) *MockInvoicesController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInvoicesController_List_Call) Return(_a0 []*graph.Invoice, _a1 error) *MockInvoicesController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoicesController_List_Call) RunAndReturn(run func(context.Context) ([]*graph.Invoice, error)) *MockInvoicesController_List_Call {
	_c.Call.Return(run)
	return _c
}

// ParseNumberIntoTemplate provides a mock function with given fields: template, number, date
func (_m *MockInvoicesController) ParseNumberIntoTemplate(template string, number int, date time.Time) string {
	ret := _m.Called(template, number, date)

	if len(ret) == 0 {
		panic("no return value specified for ParseNumberIntoTemplate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int, time.Time) string); ok {
		r0 = rf(template, number, date)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockInvoicesController_ParseNumberIntoTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseNumberIntoTemplate'
type MockInvoicesController_ParseNumberIntoTemplate_Call struct {
	*mock.Call
}

// ParseNumberIntoTemplate is a helper method to define mock.On call
//   - template string
//   - number int
//   - date time.Time
func (_e *MockInvoicesController_Expecter) ParseNumberIntoTemplate(template interface{}, number interface{}, date interface{}) *MockInvoicesController_ParseNumberIntoTemplate_Call {
	return &MockInvoicesController_ParseNumberIntoTemplate_Call{Call: _e.mock.On("ParseNumberIntoTemplate", template, number, date)}
}

func (_c *MockInvoicesController_ParseNumberIntoTemplate_Call) Run(run func(template string, number int, date time.Time)) *MockInvoicesController_ParseNumberIntoTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(time.Time))
	})
	return _c
}

func (_c *MockInvoicesController_ParseNumberIntoTemplate_Call) Return(_a0 string) *MockInvoicesController_ParseNumberIntoTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInvoicesController_ParseNumberIntoTemplate_Call) RunAndReturn(run func(string, int, time.Time) string) *MockInvoicesController_ParseNumberIntoTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, id, patch
func (_m *MockInvoicesController) Patch(ctx context.Context, id string, patch map[string]interface{}) error {
	ret := _m.Called(ctx, id, patch)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, patch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInvoicesController_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type MockInvoicesController_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - patch map[string]interface{}
func (_e *MockInvoicesController_Expecter) Patch(ctx interface{}, id interface{}, patch interface{}) *MockInvoicesController_Patch_Call {
	return &MockInvoicesController_Patch_Call{Call: _e.mock.On("Patch", ctx, id, patch)}
}

func (_c *MockInvoicesController_Patch_Call) Run(run func(ctx context.Context, id string, patch map[string]interface{})) *MockInvoicesController_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockInvoicesController_Patch_Call) Return(_a0 error) *MockInvoicesController_Patch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInvoicesController_Patch_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) error) *MockInvoicesController_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, tx
func (_m *MockInvoicesController) Update(ctx context.Context, tx *graph.Invoice) (*graph.Invoice, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *graph.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *graph.Invoice) (*graph.Invoice, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *graph.Invoice) *graph.Invoice); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *graph.Invoice) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvoicesController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockInvoicesController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *graph.Invoice
func (_e *MockInvoicesController_Expecter) Update(ctx interface{}, tx interface{}) *MockInvoicesController_Update_Call {
	return &MockInvoicesController_Update_Call{Call: _e.mock.On("Update", ctx, tx)}
}

func (_c *MockInvoicesController_Update_Call) Run(run func(ctx context.Context, tx *graph.Invoice)) *MockInvoicesController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*graph.Invoice))
	})
	return _c
}

func (_c *MockInvoicesController_Update_Call) Return(_a0 *graph.Invoice, _a1 error) *MockInvoicesController_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvoicesController_Update_Call) RunAndReturn(run func(context.Context, *graph.Invoice) (*graph.Invoice, error)) *MockInvoicesController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInvoicesController creates a new instance of MockInvoicesController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvoicesController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvoicesController {
	mock := &MockInvoicesController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
