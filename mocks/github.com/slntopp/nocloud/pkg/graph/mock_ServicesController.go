// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	access "github.com/slntopp/nocloud-proto/access"

	driver "github.com/arangodb/go-driver"

	graph "github.com/slntopp/nocloud/pkg/graph"

	mock "github.com/stretchr/testify/mock"

	services "github.com/slntopp/nocloud-proto/services"

	statuses "github.com/slntopp/nocloud-proto/statuses"
)

// MockServicesController is an autogenerated mock type for the ServicesController type
type MockServicesController struct {
	mock.Mock
}

type MockServicesController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicesController) EXPECT() *MockServicesController_Expecter {
	return &MockServicesController_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, service
func (_m *MockServicesController) Create(ctx context.Context, service *services.Service) (*services.Service, error) {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *services.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.Service) (*services.Service, error)); ok {
		return rf(ctx, service)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services.Service) *services.Service); ok {
		r0 = rf(ctx, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services.Service) error); ok {
		r1 = rf(ctx, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServicesController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - service *services.Service
func (_e *MockServicesController_Expecter) Create(ctx interface{}, service interface{}) *MockServicesController_Create_Call {
	return &MockServicesController_Create_Call{Call: _e.mock.On("Create", ctx, service)}
}

func (_c *MockServicesController_Create_Call) Run(run func(ctx context.Context, service *services.Service)) *MockServicesController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.Service))
	})
	return _c
}

func (_c *MockServicesController_Create_Call) Return(_a0 *services.Service, _a1 error) *MockServicesController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesController_Create_Call) RunAndReturn(run func(context.Context, *services.Service) (*services.Service, error)) *MockServicesController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, s
func (_m *MockServicesController) Delete(ctx context.Context, s *services.Service) error {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.Service) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServicesController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - s *services.Service
func (_e *MockServicesController_Expecter) Delete(ctx interface{}, s interface{}) *MockServicesController_Delete_Call {
	return &MockServicesController_Delete_Call{Call: _e.mock.On("Delete", ctx, s)}
}

func (_c *MockServicesController_Delete_Call) Run(run func(ctx context.Context, s *services.Service)) *MockServicesController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.Service))
	})
	return _c
}

func (_c *MockServicesController_Delete_Call) Return(err error) *MockServicesController_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicesController_Delete_Call) RunAndReturn(run func(context.Context, *services.Service) error) *MockServicesController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, acc, key
func (_m *MockServicesController) Get(ctx context.Context, acc string, key string) (*services.Service, error) {
	ret := _m.Called(ctx, acc, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *services.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*services.Service, error)); ok {
		return rf(ctx, acc, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *services.Service); ok {
		r0 = rf(ctx, acc, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, acc, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServicesController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - acc string
//   - key string
func (_e *MockServicesController_Expecter) Get(ctx interface{}, acc interface{}, key interface{}) *MockServicesController_Get_Call {
	return &MockServicesController_Get_Call{Call: _e.mock.On("Get", ctx, acc, key)}
}

func (_c *MockServicesController_Get_Call) Run(run func(ctx context.Context, acc string, key string)) *MockServicesController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockServicesController_Get_Call) Return(_a0 *services.Service, _a1 error) *MockServicesController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesController_Get_Call) RunAndReturn(run func(context.Context, string, string) (*services.Service, error)) *MockServicesController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceInstancesUuids provides a mock function with given fields: key
func (_m *MockServicesController) GetServiceInstancesUuids(key string) ([]string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceInstancesUuids")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesController_GetServiceInstancesUuids_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceInstancesUuids'
type MockServicesController_GetServiceInstancesUuids_Call struct {
	*mock.Call
}

// GetServiceInstancesUuids is a helper method to define mock.On call
//   - key string
func (_e *MockServicesController_Expecter) GetServiceInstancesUuids(key interface{}) *MockServicesController_GetServiceInstancesUuids_Call {
	return &MockServicesController_GetServiceInstancesUuids_Call{Call: _e.mock.On("GetServiceInstancesUuids", key)}
}

func (_c *MockServicesController_GetServiceInstancesUuids_Call) Run(run func(key string)) *MockServicesController_GetServiceInstancesUuids_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockServicesController_GetServiceInstancesUuids_Call) Return(_a0 []string, _a1 error) *MockServicesController_GetServiceInstancesUuids_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesController_GetServiceInstancesUuids_Call) RunAndReturn(run func(string) ([]string, error)) *MockServicesController_GetServiceInstancesUuids_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithAccess provides a mock function with given fields: ctx, from, id
func (_m *MockServicesController) GetWithAccess(ctx context.Context, from driver.DocumentID, id string) (graph.Service, error) {
	ret := _m.Called(ctx, from, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithAccess")
	}

	var r0 graph.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.DocumentID, string) (graph.Service, error)); ok {
		return rf(ctx, from, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.DocumentID, string) graph.Service); ok {
		r0 = rf(ctx, from, id)
	} else {
		r0 = ret.Get(0).(graph.Service)
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.DocumentID, string) error); ok {
		r1 = rf(ctx, from, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesController_GetWithAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithAccess'
type MockServicesController_GetWithAccess_Call struct {
	*mock.Call
}

// GetWithAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - from driver.DocumentID
//   - id string
func (_e *MockServicesController_Expecter) GetWithAccess(ctx interface{}, from interface{}, id interface{}) *MockServicesController_GetWithAccess_Call {
	return &MockServicesController_GetWithAccess_Call{Call: _e.mock.On("GetWithAccess", ctx, from, id)}
}

func (_c *MockServicesController_GetWithAccess_Call) Run(run func(ctx context.Context, from driver.DocumentID, id string)) *MockServicesController_GetWithAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.DocumentID), args[2].(string))
	})
	return _c
}

func (_c *MockServicesController_GetWithAccess_Call) Return(_a0 graph.Service, _a1 error) *MockServicesController_GetWithAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesController_GetWithAccess_Call) RunAndReturn(run func(context.Context, driver.DocumentID, string) (graph.Service, error)) *MockServicesController_GetWithAccess_Call {
	_c.Call.Return(run)
	return _c
}

// IGController provides a mock function with given fields:
func (_m *MockServicesController) IGController() graph.InstancesGroupsController {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IGController")
	}

	var r0 graph.InstancesGroupsController
	if rf, ok := ret.Get(0).(func() graph.InstancesGroupsController); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(graph.InstancesGroupsController)
		}
	}

	return r0
}

// MockServicesController_IGController_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IGController'
type MockServicesController_IGController_Call struct {
	*mock.Call
}

// IGController is a helper method to define mock.On call
func (_e *MockServicesController_Expecter) IGController() *MockServicesController_IGController_Call {
	return &MockServicesController_IGController_Call{Call: _e.mock.On("IGController")}
}

func (_c *MockServicesController_IGController_Call) Run(run func()) *MockServicesController_IGController_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServicesController_IGController_Call) Return(_a0 graph.InstancesGroupsController) *MockServicesController_IGController_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicesController_IGController_Call) RunAndReturn(run func() graph.InstancesGroupsController) *MockServicesController_IGController_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: ctx, service, ns, _a3, role
func (_m *MockServicesController) Join(ctx context.Context, service *services.Service, ns *graph.Namespace, _a3 access.Level, role string) error {
	ret := _m.Called(ctx, service, ns, _a3, role)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.Service, *graph.Namespace, access.Level, string) error); ok {
		r0 = rf(ctx, service, ns, _a3, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesController_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockServicesController_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - ctx context.Context
//   - service *services.Service
//   - ns *graph.Namespace
//   - _a3 access.Level
//   - role string
func (_e *MockServicesController_Expecter) Join(ctx interface{}, service interface{}, ns interface{}, _a3 interface{}, role interface{}) *MockServicesController_Join_Call {
	return &MockServicesController_Join_Call{Call: _e.mock.On("Join", ctx, service, ns, _a3, role)}
}

func (_c *MockServicesController_Join_Call) Run(run func(ctx context.Context, service *services.Service, ns *graph.Namespace, _a3 access.Level, role string)) *MockServicesController_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.Service), args[2].(*graph.Namespace), args[3].(access.Level), args[4].(string))
	})
	return _c
}

func (_c *MockServicesController_Join_Call) Return(_a0 error) *MockServicesController_Join_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicesController_Join_Call) RunAndReturn(run func(context.Context, *services.Service, *graph.Namespace, access.Level, string) error) *MockServicesController_Join_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, requestor, request
func (_m *MockServicesController) List(ctx context.Context, requestor string, request *services.ListRequest) (*graph.ServicesResult, error) {
	ret := _m.Called(ctx, requestor, request)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *graph.ServicesResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *services.ListRequest) (*graph.ServicesResult, error)); ok {
		return rf(ctx, requestor, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *services.ListRequest) *graph.ServicesResult); ok {
		r0 = rf(ctx, requestor, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.ServicesResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *services.ListRequest) error); ok {
		r1 = rf(ctx, requestor, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicesController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - requestor string
//   - request *services.ListRequest
func (_e *MockServicesController_Expecter) List(ctx interface{}, requestor interface{}, request interface{}) *MockServicesController_List_Call {
	return &MockServicesController_List_Call{Call: _e.mock.On("List", ctx, requestor, request)}
}

func (_c *MockServicesController_List_Call) Run(run func(ctx context.Context, requestor string, request *services.ListRequest)) *MockServicesController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*services.ListRequest))
	})
	return _c
}

func (_c *MockServicesController_List_Call) Return(_a0 *graph.ServicesResult, _a1 error) *MockServicesController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesController_List_Call) RunAndReturn(run func(context.Context, string, *services.ListRequest) (*graph.ServicesResult, error)) *MockServicesController_List_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatus provides a mock function with given fields: ctx, s, status
func (_m *MockServicesController) SetStatus(ctx context.Context, s *services.Service, status statuses.NoCloudStatus) error {
	ret := _m.Called(ctx, s, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.Service, statuses.NoCloudStatus) error); ok {
		r0 = rf(ctx, s, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesController_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type MockServicesController_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - s *services.Service
//   - status statuses.NoCloudStatus
func (_e *MockServicesController_Expecter) SetStatus(ctx interface{}, s interface{}, status interface{}) *MockServicesController_SetStatus_Call {
	return &MockServicesController_SetStatus_Call{Call: _e.mock.On("SetStatus", ctx, s, status)}
}

func (_c *MockServicesController_SetStatus_Call) Run(run func(ctx context.Context, s *services.Service, status statuses.NoCloudStatus)) *MockServicesController_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.Service), args[2].(statuses.NoCloudStatus))
	})
	return _c
}

func (_c *MockServicesController_SetStatus_Call) Return(err error) *MockServicesController_SetStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicesController_SetStatus_Call) RunAndReturn(run func(context.Context, *services.Service, statuses.NoCloudStatus) error) *MockServicesController_SetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, service, hash
func (_m *MockServicesController) Update(ctx context.Context, service *services.Service, hash bool) error {
	ret := _m.Called(ctx, service, hash)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.Service, bool) error); ok {
		r0 = rf(ctx, service, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockServicesController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - service *services.Service
//   - hash bool
func (_e *MockServicesController_Expecter) Update(ctx interface{}, service interface{}, hash interface{}) *MockServicesController_Update_Call {
	return &MockServicesController_Update_Call{Call: _e.mock.On("Update", ctx, service, hash)}
}

func (_c *MockServicesController_Update_Call) Run(run func(ctx context.Context, service *services.Service, hash bool)) *MockServicesController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.Service), args[2].(bool))
	})
	return _c
}

func (_c *MockServicesController_Update_Call) Return(_a0 error) *MockServicesController_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicesController_Update_Call) RunAndReturn(run func(context.Context, *services.Service, bool) error) *MockServicesController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicesController creates a new instance of MockServicesController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicesController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicesController {
	mock := &MockServicesController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
