// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	accounts "github.com/slntopp/nocloud-proto/registry/accounts"

	credentials "github.com/slntopp/nocloud/pkg/credentials"

	driver "github.com/arangodb/go-driver"

	graph "github.com/slntopp/nocloud/pkg/graph"

	mock "github.com/stretchr/testify/mock"

	structpb "google.golang.org/protobuf/types/known/structpb"
)

// MockAccountsController is an autogenerated mock type for the AccountsController type
type MockAccountsController struct {
	mock.Mock
}

type MockAccountsController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountsController) EXPECT() *MockAccountsController_Expecter {
	return &MockAccountsController_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: ctx, auth_type, args
func (_m *MockAccountsController) Authorize(ctx context.Context, auth_type string, args ...string) (graph.Account, bool) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, auth_type)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 graph.Account
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (graph.Account, bool)); ok {
		return rf(ctx, auth_type, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) graph.Account); ok {
		r0 = rf(ctx, auth_type, args...)
	} else {
		r0 = ret.Get(0).(graph.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) bool); ok {
		r1 = rf(ctx, auth_type, args...)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockAccountsController_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAccountsController_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - auth_type string
//   - args ...string
func (_e *MockAccountsController_Expecter) Authorize(ctx interface{}, auth_type interface{}, args ...interface{}) *MockAccountsController_Authorize_Call {
	return &MockAccountsController_Authorize_Call{Call: _e.mock.On("Authorize",
		append([]interface{}{ctx, auth_type}, args...)...)}
}

func (_c *MockAccountsController_Authorize_Call) Run(run func(ctx context.Context, auth_type string, args ...string)) *MockAccountsController_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockAccountsController_Authorize_Call) Return(_a0 graph.Account, _a1 bool) *MockAccountsController_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_Authorize_Call) RunAndReturn(run func(context.Context, string, ...string) (graph.Account, bool)) *MockAccountsController_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, acc
func (_m *MockAccountsController) Create(ctx context.Context, acc accounts.Account) (graph.Account, error) {
	ret := _m.Called(ctx, acc)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 graph.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, accounts.Account) (graph.Account, error)); ok {
		return rf(ctx, acc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, accounts.Account) graph.Account); ok {
		r0 = rf(ctx, acc)
	} else {
		r0 = ret.Get(0).(graph.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, accounts.Account) error); ok {
		r1 = rf(ctx, acc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountsController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - acc accounts.Account
func (_e *MockAccountsController_Expecter) Create(ctx interface{}, acc interface{}) *MockAccountsController_Create_Call {
	return &MockAccountsController_Create_Call{Call: _e.mock.On("Create", ctx, acc)}
}

func (_c *MockAccountsController_Create_Call) Run(run func(ctx context.Context, acc accounts.Account)) *MockAccountsController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(accounts.Account))
	})
	return _c
}

func (_c *MockAccountsController_Create_Call) Return(_a0 graph.Account, _a1 error) *MockAccountsController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_Create_Call) RunAndReturn(run func(context.Context, accounts.Account) (graph.Account, error)) *MockAccountsController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockAccountsController) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountsController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountsController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountsController_Expecter) Delete(ctx interface{}, id interface{}) *MockAccountsController_Delete_Call {
	return &MockAccountsController_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAccountsController_Delete_Call) Run(run func(ctx context.Context, id string)) *MockAccountsController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountsController_Delete_Call) Return(_a0 error) *MockAccountsController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountsController_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockAccountsController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureRootExists provides a mock function with given fields: passwd
func (_m *MockAccountsController) EnsureRootExists(passwd string) error {
	ret := _m.Called(passwd)

	if len(ret) == 0 {
		panic("no return value specified for EnsureRootExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(passwd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountsController_EnsureRootExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureRootExists'
type MockAccountsController_EnsureRootExists_Call struct {
	*mock.Call
}

// EnsureRootExists is a helper method to define mock.On call
//   - passwd string
func (_e *MockAccountsController_Expecter) EnsureRootExists(passwd interface{}) *MockAccountsController_EnsureRootExists_Call {
	return &MockAccountsController_EnsureRootExists_Call{Call: _e.mock.On("EnsureRootExists", passwd)}
}

func (_c *MockAccountsController_EnsureRootExists_Call) Run(run func(passwd string)) *MockAccountsController_EnsureRootExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAccountsController_EnsureRootExists_Call) Return(err error) *MockAccountsController_EnsureRootExists_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountsController_EnsureRootExists_Call) RunAndReturn(run func(string) error) *MockAccountsController_EnsureRootExists_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, id
func (_m *MockAccountsController) Exists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsController_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockAccountsController_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountsController_Expecter) Exists(ctx interface{}, id interface{}) *MockAccountsController_Exists_Call {
	return &MockAccountsController_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockAccountsController_Exists_Call) Run(run func(ctx context.Context, id string)) *MockAccountsController_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountsController_Exists_Call) Return(_a0 bool, _a1 error) *MockAccountsController_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_Exists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockAccountsController_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockAccountsController) Get(ctx context.Context, id string) (graph.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 graph.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (graph.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) graph.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(graph.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountsController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountsController_Expecter) Get(ctx interface{}, id interface{}) *MockAccountsController_Get_Call {
	return &MockAccountsController_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockAccountsController_Get_Call) Run(run func(ctx context.Context, id string)) *MockAccountsController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountsController_Get_Call) Return(_a0 graph.Account, _a1 error) *MockAccountsController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_Get_Call) RunAndReturn(run func(context.Context, string) (graph.Account, error)) *MockAccountsController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountOrOwnerAccountIfPresent provides a mock function with given fields: ctx, id
func (_m *MockAccountsController) GetAccountOrOwnerAccountIfPresent(ctx context.Context, id string) (graph.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountOrOwnerAccountIfPresent")
	}

	var r0 graph.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (graph.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) graph.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(graph.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountOrOwnerAccountIfPresent'
type MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call struct {
	*mock.Call
}

// GetAccountOrOwnerAccountIfPresent is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAccountsController_Expecter) GetAccountOrOwnerAccountIfPresent(ctx interface{}, id interface{}) *MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call {
	return &MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call{Call: _e.mock.On("GetAccountOrOwnerAccountIfPresent", ctx, id)}
}

func (_c *MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call) Run(run func(ctx context.Context, id string)) *MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call) Return(_a0 graph.Account, _a1 error) *MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call) RunAndReturn(run func(context.Context, string) (graph.Account, error)) *MockAccountsController_GetAccountOrOwnerAccountIfPresent_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields: ctx, edge_col, acc, auth_type
func (_m *MockAccountsController) GetCredentials(ctx context.Context, edge_col driver.Collection, acc graph.Account, auth_type string) (string, bool) {
	ret := _m.Called(ctx, edge_col, acc, auth_type)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, driver.Collection, graph.Account, string) (string, bool)); ok {
		return rf(ctx, edge_col, acc, auth_type)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.Collection, graph.Account, string) string); ok {
		r0 = rf(ctx, edge_col, acc, auth_type)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.Collection, graph.Account, string) bool); ok {
		r1 = rf(ctx, edge_col, acc, auth_type)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockAccountsController_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type MockAccountsController_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - edge_col driver.Collection
//   - acc graph.Account
//   - auth_type string
func (_e *MockAccountsController_Expecter) GetCredentials(ctx interface{}, edge_col interface{}, acc interface{}, auth_type interface{}) *MockAccountsController_GetCredentials_Call {
	return &MockAccountsController_GetCredentials_Call{Call: _e.mock.On("GetCredentials", ctx, edge_col, acc, auth_type)}
}

func (_c *MockAccountsController_GetCredentials_Call) Run(run func(ctx context.Context, edge_col driver.Collection, acc graph.Account, auth_type string)) *MockAccountsController_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.Collection), args[2].(graph.Account), args[3].(string))
	})
	return _c
}

func (_c *MockAccountsController_GetCredentials_Call) Return(key string, has_credentials bool) *MockAccountsController_GetCredentials_Call {
	_c.Call.Return(key, has_credentials)
	return _c
}

func (_c *MockAccountsController_GetCredentials_Call) RunAndReturn(run func(context.Context, driver.Collection, graph.Account, string) (string, bool)) *MockAccountsController_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields: ctx, a
func (_m *MockAccountsController) GetNamespace(ctx context.Context, a graph.Account) (graph.Namespace, error) {
	ret := _m.Called(ctx, a)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 graph.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account) (graph.Namespace, error)); ok {
		return rf(ctx, a)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account) graph.Namespace); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Get(0).(graph.Namespace)
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.Account) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsController_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type MockAccountsController_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - a graph.Account
func (_e *MockAccountsController_Expecter) GetNamespace(ctx interface{}, a interface{}) *MockAccountsController_GetNamespace_Call {
	return &MockAccountsController_GetNamespace_Call{Call: _e.mock.On("GetNamespace", ctx, a)}
}

func (_c *MockAccountsController_GetNamespace_Call) Run(run func(ctx context.Context, a graph.Account)) *MockAccountsController_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.Account))
	})
	return _c
}

func (_c *MockAccountsController_GetNamespace_Call) Return(_a0 graph.Namespace, _a1 error) *MockAccountsController_GetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_GetNamespace_Call) RunAndReturn(run func(context.Context, graph.Account) (graph.Namespace, error)) *MockAccountsController_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithAccess provides a mock function with given fields: ctx, from, id
func (_m *MockAccountsController) GetWithAccess(ctx context.Context, from driver.DocumentID, id string) (graph.Account, error) {
	ret := _m.Called(ctx, from, id)

	if len(ret) == 0 {
		panic("no return value specified for GetWithAccess")
	}

	var r0 graph.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.DocumentID, string) (graph.Account, error)); ok {
		return rf(ctx, from, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, driver.DocumentID, string) graph.Account); ok {
		r0 = rf(ctx, from, id)
	} else {
		r0 = ret.Get(0).(graph.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, driver.DocumentID, string) error); ok {
		r1 = rf(ctx, from, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsController_GetWithAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithAccess'
type MockAccountsController_GetWithAccess_Call struct {
	*mock.Call
}

// GetWithAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - from driver.DocumentID
//   - id string
func (_e *MockAccountsController_Expecter) GetWithAccess(ctx interface{}, from interface{}, id interface{}) *MockAccountsController_GetWithAccess_Call {
	return &MockAccountsController_GetWithAccess_Call{Call: _e.mock.On("GetWithAccess", ctx, from, id)}
}

func (_c *MockAccountsController_GetWithAccess_Call) Run(run func(ctx context.Context, from driver.DocumentID, id string)) *MockAccountsController_GetWithAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(driver.DocumentID), args[2].(string))
	})
	return _c
}

func (_c *MockAccountsController_GetWithAccess_Call) Return(_a0 graph.Account, _a1 error) *MockAccountsController_GetWithAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_GetWithAccess_Call) RunAndReturn(run func(context.Context, driver.DocumentID, string) (graph.Account, error)) *MockAccountsController_GetWithAccess_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, requestor, req_depth
func (_m *MockAccountsController) List(ctx context.Context, requestor graph.Account, req_depth int32) ([]graph.Account, error) {
	ret := _m.Called(ctx, requestor, req_depth)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []graph.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, int32) ([]graph.Account, error)); ok {
		return rf(ctx, requestor, req_depth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, int32) []graph.Account); ok {
		r0 = rf(ctx, requestor, req_depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]graph.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, graph.Account, int32) error); ok {
		r1 = rf(ctx, requestor, req_depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountsController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountsController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - requestor graph.Account
//   - req_depth int32
func (_e *MockAccountsController_Expecter) List(ctx interface{}, requestor interface{}, req_depth interface{}) *MockAccountsController_List_Call {
	return &MockAccountsController_List_Call{Call: _e.mock.On("List", ctx, requestor, req_depth)}
}

func (_c *MockAccountsController_List_Call) Run(run func(ctx context.Context, requestor graph.Account, req_depth int32)) *MockAccountsController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.Account), args[2].(int32))
	})
	return _c
}

func (_c *MockAccountsController_List_Call) Return(_a0 []graph.Account, _a1 error) *MockAccountsController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountsController_List_Call) RunAndReturn(run func(context.Context, graph.Account, int32) ([]graph.Account, error)) *MockAccountsController_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListImproved provides a mock function with given fields: ctx, requester, depth, offset, limit, field, sort, filters
func (_m *MockAccountsController) ListImproved(ctx context.Context, requester string, depth int32, offset uint64, limit uint64, field string, sort string, filters map[string]*structpb.Value) ([]graph.Account, int64, int64, error) {
	ret := _m.Called(ctx, requester, depth, offset, limit, field, sort, filters)

	if len(ret) == 0 {
		panic("no return value specified for ListImproved")
	}

	var r0 []graph.Account
	var r1 int64
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, uint64, uint64, string, string, map[string]*structpb.Value) ([]graph.Account, int64, int64, error)); ok {
		return rf(ctx, requester, depth, offset, limit, field, sort, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, uint64, uint64, string, string, map[string]*structpb.Value) []graph.Account); ok {
		r0 = rf(ctx, requester, depth, offset, limit, field, sort, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]graph.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, uint64, uint64, string, string, map[string]*structpb.Value) int64); ok {
		r1 = rf(ctx, requester, depth, offset, limit, field, sort, filters)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int32, uint64, uint64, string, string, map[string]*structpb.Value) int64); ok {
		r2 = rf(ctx, requester, depth, offset, limit, field, sort, filters)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, int32, uint64, uint64, string, string, map[string]*structpb.Value) error); ok {
		r3 = rf(ctx, requester, depth, offset, limit, field, sort, filters)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockAccountsController_ListImproved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImproved'
type MockAccountsController_ListImproved_Call struct {
	*mock.Call
}

// ListImproved is a helper method to define mock.On call
//   - ctx context.Context
//   - requester string
//   - depth int32
//   - offset uint64
//   - limit uint64
//   - field string
//   - sort string
//   - filters map[string]*structpb.Value
func (_e *MockAccountsController_Expecter) ListImproved(ctx interface{}, requester interface{}, depth interface{}, offset interface{}, limit interface{}, field interface{}, sort interface{}, filters interface{}) *MockAccountsController_ListImproved_Call {
	return &MockAccountsController_ListImproved_Call{Call: _e.mock.On("ListImproved", ctx, requester, depth, offset, limit, field, sort, filters)}
}

func (_c *MockAccountsController_ListImproved_Call) Run(run func(ctx context.Context, requester string, depth int32, offset uint64, limit uint64, field string, sort string, filters map[string]*structpb.Value)) *MockAccountsController_ListImproved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(uint64), args[4].(uint64), args[5].(string), args[6].(string), args[7].(map[string]*structpb.Value))
	})
	return _c
}

func (_c *MockAccountsController_ListImproved_Call) Return(_a0 []graph.Account, count int64, active int64, err error) *MockAccountsController_ListImproved_Call {
	_c.Call.Return(_a0, count, active, err)
	return _c
}

func (_c *MockAccountsController_ListImproved_Call) RunAndReturn(run func(context.Context, string, int32, uint64, uint64, string, string, map[string]*structpb.Value) ([]graph.Account, int64, int64, error)) *MockAccountsController_ListImproved_Call {
	_c.Call.Return(run)
	return _c
}

// SetCredentials provides a mock function with given fields: ctx, acc, edge, c, role
func (_m *MockAccountsController) SetCredentials(ctx context.Context, acc graph.Account, edge driver.Collection, c credentials.Credentials, role string) error {
	ret := _m.Called(ctx, acc, edge, c, role)

	if len(ret) == 0 {
		panic("no return value specified for SetCredentials")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, driver.Collection, credentials.Credentials, string) error); ok {
		r0 = rf(ctx, acc, edge, c, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountsController_SetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCredentials'
type MockAccountsController_SetCredentials_Call struct {
	*mock.Call
}

// SetCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - acc graph.Account
//   - edge driver.Collection
//   - c credentials.Credentials
//   - role string
func (_e *MockAccountsController_Expecter) SetCredentials(ctx interface{}, acc interface{}, edge interface{}, c interface{}, role interface{}) *MockAccountsController_SetCredentials_Call {
	return &MockAccountsController_SetCredentials_Call{Call: _e.mock.On("SetCredentials", ctx, acc, edge, c, role)}
}

func (_c *MockAccountsController_SetCredentials_Call) Run(run func(ctx context.Context, acc graph.Account, edge driver.Collection, c credentials.Credentials, role string)) *MockAccountsController_SetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.Account), args[2].(driver.Collection), args[3].(credentials.Credentials), args[4].(string))
	})
	return _c
}

func (_c *MockAccountsController_SetCredentials_Call) Return(_a0 error) *MockAccountsController_SetCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountsController_SetCredentials_Call) RunAndReturn(run func(context.Context, graph.Account, driver.Collection, credentials.Credentials, string) error) *MockAccountsController_SetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, acc, patch
func (_m *MockAccountsController) Update(ctx context.Context, acc graph.Account, patch map[string]interface{}) error {
	ret := _m.Called(ctx, acc, patch)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, graph.Account, map[string]interface{}) error); ok {
		r0 = rf(ctx, acc, patch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountsController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountsController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - acc graph.Account
//   - patch map[string]interface{}
func (_e *MockAccountsController_Expecter) Update(ctx interface{}, acc interface{}, patch interface{}) *MockAccountsController_Update_Call {
	return &MockAccountsController_Update_Call{Call: _e.mock.On("Update", ctx, acc, patch)}
}

func (_c *MockAccountsController_Update_Call) Run(run func(ctx context.Context, acc graph.Account, patch map[string]interface{})) *MockAccountsController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(graph.Account), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockAccountsController_Update_Call) Return(err error) *MockAccountsController_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountsController_Update_Call) RunAndReturn(run func(context.Context, graph.Account, map[string]interface{}) error) *MockAccountsController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentials provides a mock function with given fields: ctx, cred, c
func (_m *MockAccountsController) UpdateCredentials(ctx context.Context, cred string, c credentials.Credentials) error {
	ret := _m.Called(ctx, cred, c)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentials")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, credentials.Credentials) error); ok {
		r0 = rf(ctx, cred, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountsController_UpdateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentials'
type MockAccountsController_UpdateCredentials_Call struct {
	*mock.Call
}

// UpdateCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - cred string
//   - c credentials.Credentials
func (_e *MockAccountsController_Expecter) UpdateCredentials(ctx interface{}, cred interface{}, c interface{}) *MockAccountsController_UpdateCredentials_Call {
	return &MockAccountsController_UpdateCredentials_Call{Call: _e.mock.On("UpdateCredentials", ctx, cred, c)}
}

func (_c *MockAccountsController_UpdateCredentials_Call) Run(run func(ctx context.Context, cred string, c credentials.Credentials)) *MockAccountsController_UpdateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(credentials.Credentials))
	})
	return _c
}

func (_c *MockAccountsController_UpdateCredentials_Call) Return(err error) *MockAccountsController_UpdateCredentials_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountsController_UpdateCredentials_Call) RunAndReturn(run func(context.Context, string, credentials.Credentials) error) *MockAccountsController_UpdateCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountsController creates a new instance of MockAccountsController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountsController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountsController {
	mock := &MockAccountsController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
