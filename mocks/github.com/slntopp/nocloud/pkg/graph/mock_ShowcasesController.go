// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	services_providers "github.com/slntopp/nocloud-proto/services_providers"
)

// MockShowcasesController is an autogenerated mock type for the ShowcasesController type
type MockShowcasesController struct {
	mock.Mock
}

type MockShowcasesController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShowcasesController) EXPECT() *MockShowcasesController_Expecter {
	return &MockShowcasesController_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, showcase
func (_m *MockShowcasesController) Create(ctx context.Context, showcase *services_providers.Showcase) (*services_providers.Showcase, error) {
	ret := _m.Called(ctx, showcase)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *services_providers.Showcase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services_providers.Showcase) (*services_providers.Showcase, error)); ok {
		return rf(ctx, showcase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services_providers.Showcase) *services_providers.Showcase); ok {
		r0 = rf(ctx, showcase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services_providers.Showcase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services_providers.Showcase) error); ok {
		r1 = rf(ctx, showcase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShowcasesController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockShowcasesController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - showcase *services_providers.Showcase
func (_e *MockShowcasesController_Expecter) Create(ctx interface{}, showcase interface{}) *MockShowcasesController_Create_Call {
	return &MockShowcasesController_Create_Call{Call: _e.mock.On("Create", ctx, showcase)}
}

func (_c *MockShowcasesController_Create_Call) Run(run func(ctx context.Context, showcase *services_providers.Showcase)) *MockShowcasesController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services_providers.Showcase))
	})
	return _c
}

func (_c *MockShowcasesController_Create_Call) Return(_a0 *services_providers.Showcase, _a1 error) *MockShowcasesController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShowcasesController_Create_Call) RunAndReturn(run func(context.Context, *services_providers.Showcase) (*services_providers.Showcase, error)) *MockShowcasesController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, uuid
func (_m *MockShowcasesController) Delete(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockShowcasesController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockShowcasesController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockShowcasesController_Expecter) Delete(ctx interface{}, uuid interface{}) *MockShowcasesController_Delete_Call {
	return &MockShowcasesController_Delete_Call{Call: _e.mock.On("Delete", ctx, uuid)}
}

func (_c *MockShowcasesController_Delete_Call) Run(run func(ctx context.Context, uuid string)) *MockShowcasesController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockShowcasesController_Delete_Call) Return(_a0 error) *MockShowcasesController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockShowcasesController_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockShowcasesController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *MockShowcasesController) Get(ctx context.Context, uuid string) (*services_providers.Showcase, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *services_providers.Showcase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*services_providers.Showcase, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *services_providers.Showcase); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services_providers.Showcase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShowcasesController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockShowcasesController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockShowcasesController_Expecter) Get(ctx interface{}, uuid interface{}) *MockShowcasesController_Get_Call {
	return &MockShowcasesController_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *MockShowcasesController_Get_Call) Run(run func(ctx context.Context, uuid string)) *MockShowcasesController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockShowcasesController_Get_Call) Return(_a0 *services_providers.Showcase, _a1 error) *MockShowcasesController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShowcasesController_Get_Call) RunAndReturn(run func(context.Context, string) (*services_providers.Showcase, error)) *MockShowcasesController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, requestor, root
func (_m *MockShowcasesController) List(ctx context.Context, requestor string, root bool) ([]*services_providers.Showcase, error) {
	ret := _m.Called(ctx, requestor, root)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*services_providers.Showcase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ([]*services_providers.Showcase, error)); ok {
		return rf(ctx, requestor, root)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []*services_providers.Showcase); ok {
		r0 = rf(ctx, requestor, root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services_providers.Showcase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, requestor, root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShowcasesController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockShowcasesController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - requestor string
//   - root bool
func (_e *MockShowcasesController_Expecter) List(ctx interface{}, requestor interface{}, root interface{}) *MockShowcasesController_List_Call {
	return &MockShowcasesController_List_Call{Call: _e.mock.On("List", ctx, requestor, root)}
}

func (_c *MockShowcasesController_List_Call) Run(run func(ctx context.Context, requestor string, root bool)) *MockShowcasesController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockShowcasesController_List_Call) Return(_a0 []*services_providers.Showcase, _a1 error) *MockShowcasesController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShowcasesController_List_Call) RunAndReturn(run func(context.Context, string, bool) ([]*services_providers.Showcase, error)) *MockShowcasesController_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, showcase
func (_m *MockShowcasesController) Update(ctx context.Context, showcase *services_providers.Showcase) (*services_providers.Showcase, error) {
	ret := _m.Called(ctx, showcase)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *services_providers.Showcase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services_providers.Showcase) (*services_providers.Showcase, error)); ok {
		return rf(ctx, showcase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services_providers.Showcase) *services_providers.Showcase); ok {
		r0 = rf(ctx, showcase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services_providers.Showcase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services_providers.Showcase) error); ok {
		r1 = rf(ctx, showcase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShowcasesController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockShowcasesController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - showcase *services_providers.Showcase
func (_e *MockShowcasesController_Expecter) Update(ctx interface{}, showcase interface{}) *MockShowcasesController_Update_Call {
	return &MockShowcasesController_Update_Call{Call: _e.mock.On("Update", ctx, showcase)}
}

func (_c *MockShowcasesController_Update_Call) Run(run func(ctx context.Context, showcase *services_providers.Showcase)) *MockShowcasesController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services_providers.Showcase))
	})
	return _c
}

func (_c *MockShowcasesController_Update_Call) Return(_a0 *services_providers.Showcase, _a1 error) *MockShowcasesController_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShowcasesController_Update_Call) RunAndReturn(run func(context.Context, *services_providers.Showcase) (*services_providers.Showcase, error)) *MockShowcasesController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShowcasesController creates a new instance of MockShowcasesController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShowcasesController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShowcasesController {
	mock := &MockShowcasesController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
