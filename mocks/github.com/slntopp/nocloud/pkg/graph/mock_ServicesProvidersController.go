// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	instances "github.com/slntopp/nocloud-proto/instances"
	graph "github.com/slntopp/nocloud/pkg/graph"

	mock "github.com/stretchr/testify/mock"

	services "github.com/slntopp/nocloud-proto/services"

	services_providers "github.com/slntopp/nocloud-proto/services_providers"
)

// MockServicesProvidersController is an autogenerated mock type for the ServicesProvidersController type
type MockServicesProvidersController struct {
	mock.Mock
}

type MockServicesProvidersController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicesProvidersController) EXPECT() *MockServicesProvidersController_Expecter {
	return &MockServicesProvidersController_Expecter{mock: &_m.Mock}
}

// BindPlan provides a mock function with given fields: ctx, uuid, planUuid
func (_m *MockServicesProvidersController) BindPlan(ctx context.Context, uuid string, planUuid string) error {
	ret := _m.Called(ctx, uuid, planUuid)

	if len(ret) == 0 {
		panic("no return value specified for BindPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, uuid, planUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesProvidersController_BindPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindPlan'
type MockServicesProvidersController_BindPlan_Call struct {
	*mock.Call
}

// BindPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - planUuid string
func (_e *MockServicesProvidersController_Expecter) BindPlan(ctx interface{}, uuid interface{}, planUuid interface{}) *MockServicesProvidersController_BindPlan_Call {
	return &MockServicesProvidersController_BindPlan_Call{Call: _e.mock.On("BindPlan", ctx, uuid, planUuid)}
}

func (_c *MockServicesProvidersController_BindPlan_Call) Run(run func(ctx context.Context, uuid string, planUuid string)) *MockServicesProvidersController_BindPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockServicesProvidersController_BindPlan_Call) Return(_a0 error) *MockServicesProvidersController_BindPlan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicesProvidersController_BindPlan_Call) RunAndReturn(run func(context.Context, string, string) error) *MockServicesProvidersController_BindPlan_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, sp
func (_m *MockServicesProvidersController) Create(ctx context.Context, sp *graph.ServicesProvider) error {
	ret := _m.Called(ctx, sp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *graph.ServicesProvider) error); ok {
		r0 = rf(ctx, sp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesProvidersController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServicesProvidersController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - sp *graph.ServicesProvider
func (_e *MockServicesProvidersController_Expecter) Create(ctx interface{}, sp interface{}) *MockServicesProvidersController_Create_Call {
	return &MockServicesProvidersController_Create_Call{Call: _e.mock.On("Create", ctx, sp)}
}

func (_c *MockServicesProvidersController_Create_Call) Run(run func(ctx context.Context, sp *graph.ServicesProvider)) *MockServicesProvidersController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*graph.ServicesProvider))
	})
	return _c
}

func (_c *MockServicesProvidersController_Create_Call) Return(err error) *MockServicesProvidersController_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicesProvidersController_Create_Call) RunAndReturn(run func(context.Context, *graph.ServicesProvider) error) *MockServicesProvidersController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, sp
func (_m *MockServicesProvidersController) Delete(ctx context.Context, sp *services_providers.ServicesProvider) error {
	ret := _m.Called(ctx, sp)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *services_providers.ServicesProvider) error); ok {
		r0 = rf(ctx, sp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesProvidersController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServicesProvidersController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - sp *services_providers.ServicesProvider
func (_e *MockServicesProvidersController_Expecter) Delete(ctx interface{}, sp interface{}) *MockServicesProvidersController_Delete_Call {
	return &MockServicesProvidersController_Delete_Call{Call: _e.mock.On("Delete", ctx, sp)}
}

func (_c *MockServicesProvidersController_Delete_Call) Run(run func(ctx context.Context, sp *services_providers.ServicesProvider)) *MockServicesProvidersController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services_providers.ServicesProvider))
	})
	return _c
}

func (_c *MockServicesProvidersController_Delete_Call) Return(err error) *MockServicesProvidersController_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicesProvidersController_Delete_Call) RunAndReturn(run func(context.Context, *services_providers.ServicesProvider) error) *MockServicesProvidersController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEdges provides a mock function with given fields: ctx, id
func (_m *MockServicesProvidersController) DeleteEdges(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEdges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesProvidersController_DeleteEdges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEdges'
type MockServicesProvidersController_DeleteEdges_Call struct {
	*mock.Call
}

// DeleteEdges is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockServicesProvidersController_Expecter) DeleteEdges(ctx interface{}, id interface{}) *MockServicesProvidersController_DeleteEdges_Call {
	return &MockServicesProvidersController_DeleteEdges_Call{Call: _e.mock.On("DeleteEdges", ctx, id)}
}

func (_c *MockServicesProvidersController_DeleteEdges_Call) Run(run func(ctx context.Context, id string)) *MockServicesProvidersController_DeleteEdges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServicesProvidersController_DeleteEdges_Call) Return(_a0 error) *MockServicesProvidersController_DeleteEdges_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicesProvidersController_DeleteEdges_Call) RunAndReturn(run func(context.Context, string) error) *MockServicesProvidersController_DeleteEdges_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockServicesProvidersController) Get(ctx context.Context, id string) (*graph.ServicesProvider, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *graph.ServicesProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*graph.ServicesProvider, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *graph.ServicesProvider); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.ServicesProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesProvidersController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServicesProvidersController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockServicesProvidersController_Expecter) Get(ctx interface{}, id interface{}) *MockServicesProvidersController_Get_Call {
	return &MockServicesProvidersController_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServicesProvidersController_Get_Call) Run(run func(ctx context.Context, id string)) *MockServicesProvidersController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServicesProvidersController_Get_Call) Return(r *graph.ServicesProvider, err error) *MockServicesProvidersController_Get_Call {
	_c.Call.Return(r, err)
	return _c
}

func (_c *MockServicesProvidersController_Get_Call) RunAndReturn(run func(context.Context, string) (*graph.ServicesProvider, error)) *MockServicesProvidersController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx, sp
func (_m *MockServicesProvidersController) GetGroups(ctx context.Context, sp *graph.ServicesProvider) ([]*instances.InstancesGroup, error) {
	ret := _m.Called(ctx, sp)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []*instances.InstancesGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *graph.ServicesProvider) ([]*instances.InstancesGroup, error)); ok {
		return rf(ctx, sp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *graph.ServicesProvider) []*instances.InstancesGroup); ok {
		r0 = rf(ctx, sp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*instances.InstancesGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *graph.ServicesProvider) error); ok {
		r1 = rf(ctx, sp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesProvidersController_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockServicesProvidersController_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - sp *graph.ServicesProvider
func (_e *MockServicesProvidersController_Expecter) GetGroups(ctx interface{}, sp interface{}) *MockServicesProvidersController_GetGroups_Call {
	return &MockServicesProvidersController_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx, sp)}
}

func (_c *MockServicesProvidersController_GetGroups_Call) Run(run func(ctx context.Context, sp *graph.ServicesProvider)) *MockServicesProvidersController_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*graph.ServicesProvider))
	})
	return _c
}

func (_c *MockServicesProvidersController_GetGroups_Call) Return(_a0 []*instances.InstancesGroup, _a1 error) *MockServicesProvidersController_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesProvidersController_GetGroups_Call) RunAndReturn(run func(context.Context, *graph.ServicesProvider) ([]*instances.InstancesGroup, error)) *MockServicesProvidersController_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function with given fields: ctx, sp
func (_m *MockServicesProvidersController) GetServices(ctx context.Context, sp *graph.ServicesProvider) ([]*services.Service, error) {
	ret := _m.Called(ctx, sp)

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []*services.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *graph.ServicesProvider) ([]*services.Service, error)); ok {
		return rf(ctx, sp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *graph.ServicesProvider) []*services.Service); ok {
		r0 = rf(ctx, sp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *graph.ServicesProvider) error); ok {
		r1 = rf(ctx, sp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesProvidersController_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type MockServicesProvidersController_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
//   - ctx context.Context
//   - sp *graph.ServicesProvider
func (_e *MockServicesProvidersController_Expecter) GetServices(ctx interface{}, sp interface{}) *MockServicesProvidersController_GetServices_Call {
	return &MockServicesProvidersController_GetServices_Call{Call: _e.mock.On("GetServices", ctx, sp)}
}

func (_c *MockServicesProvidersController_GetServices_Call) Run(run func(ctx context.Context, sp *graph.ServicesProvider)) *MockServicesProvidersController_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*graph.ServicesProvider))
	})
	return _c
}

func (_c *MockServicesProvidersController_GetServices_Call) Return(_a0 []*services.Service, _a1 error) *MockServicesProvidersController_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesProvidersController_GetServices_Call) RunAndReturn(run func(context.Context, *graph.ServicesProvider) ([]*services.Service, error)) *MockServicesProvidersController_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, requestor, isRoot
func (_m *MockServicesProvidersController) List(ctx context.Context, requestor string, isRoot bool) ([]*graph.ServicesProvider, error) {
	ret := _m.Called(ctx, requestor, isRoot)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*graph.ServicesProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ([]*graph.ServicesProvider, error)); ok {
		return rf(ctx, requestor, isRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []*graph.ServicesProvider); ok {
		r0 = rf(ctx, requestor, isRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graph.ServicesProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, requestor, isRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServicesProvidersController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicesProvidersController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - requestor string
//   - isRoot bool
func (_e *MockServicesProvidersController_Expecter) List(ctx interface{}, requestor interface{}, isRoot interface{}) *MockServicesProvidersController_List_Call {
	return &MockServicesProvidersController_List_Call{Call: _e.mock.On("List", ctx, requestor, isRoot)}
}

func (_c *MockServicesProvidersController_List_Call) Run(run func(ctx context.Context, requestor string, isRoot bool)) *MockServicesProvidersController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockServicesProvidersController_List_Call) Return(_a0 []*graph.ServicesProvider, _a1 error) *MockServicesProvidersController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServicesProvidersController_List_Call) RunAndReturn(run func(context.Context, string, bool) ([]*graph.ServicesProvider, error)) *MockServicesProvidersController_List_Call {
	_c.Call.Return(run)
	return _c
}

// UnbindPlan provides a mock function with given fields: ctx, sp, plan
func (_m *MockServicesProvidersController) UnbindPlan(ctx context.Context, sp string, plan string) error {
	ret := _m.Called(ctx, sp, plan)

	if len(ret) == 0 {
		panic("no return value specified for UnbindPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, sp, plan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesProvidersController_UnbindPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnbindPlan'
type MockServicesProvidersController_UnbindPlan_Call struct {
	*mock.Call
}

// UnbindPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - sp string
//   - plan string
func (_e *MockServicesProvidersController_Expecter) UnbindPlan(ctx interface{}, sp interface{}, plan interface{}) *MockServicesProvidersController_UnbindPlan_Call {
	return &MockServicesProvidersController_UnbindPlan_Call{Call: _e.mock.On("UnbindPlan", ctx, sp, plan)}
}

func (_c *MockServicesProvidersController_UnbindPlan_Call) Run(run func(ctx context.Context, sp string, plan string)) *MockServicesProvidersController_UnbindPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockServicesProvidersController_UnbindPlan_Call) Return(_a0 error) *MockServicesProvidersController_UnbindPlan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicesProvidersController_UnbindPlan_Call) RunAndReturn(run func(context.Context, string, string) error) *MockServicesProvidersController_UnbindPlan_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, sp
func (_m *MockServicesProvidersController) Update(ctx context.Context, sp *services_providers.ServicesProvider) error {
	ret := _m.Called(ctx, sp)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *services_providers.ServicesProvider) error); ok {
		r0 = rf(ctx, sp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServicesProvidersController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockServicesProvidersController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - sp *services_providers.ServicesProvider
func (_e *MockServicesProvidersController_Expecter) Update(ctx interface{}, sp interface{}) *MockServicesProvidersController_Update_Call {
	return &MockServicesProvidersController_Update_Call{Call: _e.mock.On("Update", ctx, sp)}
}

func (_c *MockServicesProvidersController_Update_Call) Run(run func(ctx context.Context, sp *services_providers.ServicesProvider)) *MockServicesProvidersController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services_providers.ServicesProvider))
	})
	return _c
}

func (_c *MockServicesProvidersController_Update_Call) Return(_a0 error) *MockServicesProvidersController_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServicesProvidersController_Update_Call) RunAndReturn(run func(context.Context, *services_providers.ServicesProvider) error) *MockServicesProvidersController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServicesProvidersController creates a new instance of MockServicesProvidersController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicesProvidersController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicesProvidersController {
	mock := &MockServicesProvidersController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
