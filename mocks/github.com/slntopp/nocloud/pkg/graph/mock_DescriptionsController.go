// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	descriptions "github.com/slntopp/nocloud-proto/billing/descriptions"

	mock "github.com/stretchr/testify/mock"
)

// MockDescriptionsController is an autogenerated mock type for the DescriptionsController type
type MockDescriptionsController struct {
	mock.Mock
}

type MockDescriptionsController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDescriptionsController) EXPECT() *MockDescriptionsController_Expecter {
	return &MockDescriptionsController_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx
func (_m *MockDescriptionsController) Count(ctx context.Context) ([]*descriptions.Description, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 []*descriptions.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*descriptions.Description, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*descriptions.Description); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*descriptions.Description)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDescriptionsController_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockDescriptionsController_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDescriptionsController_Expecter) Count(ctx interface{}) *MockDescriptionsController_Count_Call {
	return &MockDescriptionsController_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockDescriptionsController_Count_Call) Run(run func(ctx context.Context)) *MockDescriptionsController_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDescriptionsController_Count_Call) Return(_a0 []*descriptions.Description, _a1 error) *MockDescriptionsController_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDescriptionsController_Count_Call) RunAndReturn(run func(context.Context) ([]*descriptions.Description, error)) *MockDescriptionsController_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, description
func (_m *MockDescriptionsController) Create(ctx context.Context, description *descriptions.Description) (*descriptions.Description, error) {
	ret := _m.Called(ctx, description)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *descriptions.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *descriptions.Description) (*descriptions.Description, error)); ok {
		return rf(ctx, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *descriptions.Description) *descriptions.Description); ok {
		r0 = rf(ctx, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*descriptions.Description)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *descriptions.Description) error); ok {
		r1 = rf(ctx, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDescriptionsController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDescriptionsController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - description *descriptions.Description
func (_e *MockDescriptionsController_Expecter) Create(ctx interface{}, description interface{}) *MockDescriptionsController_Create_Call {
	return &MockDescriptionsController_Create_Call{Call: _e.mock.On("Create", ctx, description)}
}

func (_c *MockDescriptionsController_Create_Call) Run(run func(ctx context.Context, description *descriptions.Description)) *MockDescriptionsController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*descriptions.Description))
	})
	return _c
}

func (_c *MockDescriptionsController_Create_Call) Return(_a0 *descriptions.Description, _a1 error) *MockDescriptionsController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDescriptionsController_Create_Call) RunAndReturn(run func(context.Context, *descriptions.Description) (*descriptions.Description, error)) *MockDescriptionsController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, uuid
func (_m *MockDescriptionsController) Delete(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDescriptionsController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDescriptionsController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockDescriptionsController_Expecter) Delete(ctx interface{}, uuid interface{}) *MockDescriptionsController_Delete_Call {
	return &MockDescriptionsController_Delete_Call{Call: _e.mock.On("Delete", ctx, uuid)}
}

func (_c *MockDescriptionsController_Delete_Call) Run(run func(ctx context.Context, uuid string)) *MockDescriptionsController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDescriptionsController_Delete_Call) Return(_a0 error) *MockDescriptionsController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDescriptionsController_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockDescriptionsController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *MockDescriptionsController) Get(ctx context.Context, uuid string) (*descriptions.Description, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *descriptions.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*descriptions.Description, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *descriptions.Description); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*descriptions.Description)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDescriptionsController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDescriptionsController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockDescriptionsController_Expecter) Get(ctx interface{}, uuid interface{}) *MockDescriptionsController_Get_Call {
	return &MockDescriptionsController_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *MockDescriptionsController_Get_Call) Run(run func(ctx context.Context, uuid string)) *MockDescriptionsController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDescriptionsController_Get_Call) Return(_a0 *descriptions.Description, _a1 error) *MockDescriptionsController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDescriptionsController_Get_Call) RunAndReturn(run func(context.Context, string) (*descriptions.Description, error)) *MockDescriptionsController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockDescriptionsController) List(ctx context.Context, req *descriptions.ListDescriptionsRequest) ([]*descriptions.Description, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*descriptions.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *descriptions.ListDescriptionsRequest) ([]*descriptions.Description, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *descriptions.ListDescriptionsRequest) []*descriptions.Description); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*descriptions.Description)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *descriptions.ListDescriptionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDescriptionsController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockDescriptionsController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *descriptions.ListDescriptionsRequest
func (_e *MockDescriptionsController_Expecter) List(ctx interface{}, req interface{}) *MockDescriptionsController_List_Call {
	return &MockDescriptionsController_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockDescriptionsController_List_Call) Run(run func(ctx context.Context, req *descriptions.ListDescriptionsRequest)) *MockDescriptionsController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*descriptions.ListDescriptionsRequest))
	})
	return _c
}

func (_c *MockDescriptionsController_List_Call) Return(_a0 []*descriptions.Description, _a1 error) *MockDescriptionsController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDescriptionsController_List_Call) RunAndReturn(run func(context.Context, *descriptions.ListDescriptionsRequest) ([]*descriptions.Description, error)) *MockDescriptionsController_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, description
func (_m *MockDescriptionsController) Update(ctx context.Context, description *descriptions.Description) (*descriptions.Description, error) {
	ret := _m.Called(ctx, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *descriptions.Description
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *descriptions.Description) (*descriptions.Description, error)); ok {
		return rf(ctx, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *descriptions.Description) *descriptions.Description); ok {
		r0 = rf(ctx, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*descriptions.Description)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *descriptions.Description) error); ok {
		r1 = rf(ctx, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDescriptionsController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDescriptionsController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - description *descriptions.Description
func (_e *MockDescriptionsController_Expecter) Update(ctx interface{}, description interface{}) *MockDescriptionsController_Update_Call {
	return &MockDescriptionsController_Update_Call{Call: _e.mock.On("Update", ctx, description)}
}

func (_c *MockDescriptionsController_Update_Call) Run(run func(ctx context.Context, description *descriptions.Description)) *MockDescriptionsController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*descriptions.Description))
	})
	return _c
}

func (_c *MockDescriptionsController_Update_Call) Return(_a0 *descriptions.Description, _a1 error) *MockDescriptionsController_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDescriptionsController_Update_Call) RunAndReturn(run func(context.Context, *descriptions.Description) (*descriptions.Description, error)) *MockDescriptionsController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDescriptionsController creates a new instance of MockDescriptionsController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDescriptionsController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDescriptionsController {
	mock := &MockDescriptionsController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
