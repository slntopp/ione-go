// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	billing "github.com/slntopp/nocloud-proto/billing"

	graph "github.com/slntopp/nocloud/pkg/graph"

	mock "github.com/stretchr/testify/mock"

	statuses "github.com/slntopp/nocloud-proto/statuses"
)

// MockBillingPlansController is an autogenerated mock type for the BillingPlansController type
type MockBillingPlansController struct {
	mock.Mock
}

type MockBillingPlansController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillingPlansController) EXPECT() *MockBillingPlansController_Expecter {
	return &MockBillingPlansController_Expecter{mock: &_m.Mock}
}

// CheckStatus provides a mock function with given fields: ctx, plan
func (_m *MockBillingPlansController) CheckStatus(ctx context.Context, plan *billing.Plan) (statuses.NoCloudStatus, error) {
	ret := _m.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for CheckStatus")
	}

	var r0 statuses.NoCloudStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) (statuses.NoCloudStatus, error)); ok {
		return rf(ctx, plan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) statuses.NoCloudStatus); ok {
		r0 = rf(ctx, plan)
	} else {
		r0 = ret.Get(0).(statuses.NoCloudStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingPlansController_CheckStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStatus'
type MockBillingPlansController_CheckStatus_Call struct {
	*mock.Call
}

// CheckStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - plan *billing.Plan
func (_e *MockBillingPlansController_Expecter) CheckStatus(ctx interface{}, plan interface{}) *MockBillingPlansController_CheckStatus_Call {
	return &MockBillingPlansController_CheckStatus_Call{Call: _e.mock.On("CheckStatus", ctx, plan)}
}

func (_c *MockBillingPlansController_CheckStatus_Call) Run(run func(ctx context.Context, plan *billing.Plan)) *MockBillingPlansController_CheckStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Plan))
	})
	return _c
}

func (_c *MockBillingPlansController_CheckStatus_Call) Return(_a0 statuses.NoCloudStatus, _a1 error) *MockBillingPlansController_CheckStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillingPlansController_CheckStatus_Call) RunAndReturn(run func(context.Context, *billing.Plan) (statuses.NoCloudStatus, error)) *MockBillingPlansController_CheckStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, plan
func (_m *MockBillingPlansController) Create(ctx context.Context, plan *billing.Plan) (*graph.BillingPlan, error) {
	ret := _m.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *graph.BillingPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) (*graph.BillingPlan, error)); ok {
		return rf(ctx, plan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) *graph.BillingPlan); ok {
		r0 = rf(ctx, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.BillingPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingPlansController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBillingPlansController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - plan *billing.Plan
func (_e *MockBillingPlansController_Expecter) Create(ctx interface{}, plan interface{}) *MockBillingPlansController_Create_Call {
	return &MockBillingPlansController_Create_Call{Call: _e.mock.On("Create", ctx, plan)}
}

func (_c *MockBillingPlansController_Create_Call) Run(run func(ctx context.Context, plan *billing.Plan)) *MockBillingPlansController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Plan))
	})
	return _c
}

func (_c *MockBillingPlansController_Create_Call) Return(_a0 *graph.BillingPlan, _a1 error) *MockBillingPlansController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillingPlansController_Create_Call) RunAndReturn(run func(context.Context, *billing.Plan) (*graph.BillingPlan, error)) *MockBillingPlansController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, plan
func (_m *MockBillingPlansController) Delete(ctx context.Context, plan *billing.Plan) error {
	ret := _m.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) error); ok {
		r0 = rf(ctx, plan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBillingPlansController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBillingPlansController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - plan *billing.Plan
func (_e *MockBillingPlansController_Expecter) Delete(ctx interface{}, plan interface{}) *MockBillingPlansController_Delete_Call {
	return &MockBillingPlansController_Delete_Call{Call: _e.mock.On("Delete", ctx, plan)}
}

func (_c *MockBillingPlansController_Delete_Call) Run(run func(ctx context.Context, plan *billing.Plan)) *MockBillingPlansController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Plan))
	})
	return _c
}

func (_c *MockBillingPlansController_Delete_Call) Return(_a0 error) *MockBillingPlansController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBillingPlansController_Delete_Call) RunAndReturn(run func(context.Context, *billing.Plan) error) *MockBillingPlansController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, plan
func (_m *MockBillingPlansController) Get(ctx context.Context, plan *billing.Plan) (*graph.BillingPlan, error) {
	ret := _m.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *graph.BillingPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) (*graph.BillingPlan, error)); ok {
		return rf(ctx, plan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) *graph.BillingPlan); ok {
		r0 = rf(ctx, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.BillingPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingPlansController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBillingPlansController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - plan *billing.Plan
func (_e *MockBillingPlansController_Expecter) Get(ctx interface{}, plan interface{}) *MockBillingPlansController_Get_Call {
	return &MockBillingPlansController_Get_Call{Call: _e.mock.On("Get", ctx, plan)}
}

func (_c *MockBillingPlansController_Get_Call) Run(run func(ctx context.Context, plan *billing.Plan)) *MockBillingPlansController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Plan))
	})
	return _c
}

func (_c *MockBillingPlansController_Get_Call) Return(_a0 *graph.BillingPlan, _a1 error) *MockBillingPlansController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillingPlansController_Get_Call) RunAndReturn(run func(context.Context, *billing.Plan) (*graph.BillingPlan, error)) *MockBillingPlansController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// InstancesCount provides a mock function with given fields: ctx, plan
func (_m *MockBillingPlansController) InstancesCount(ctx context.Context, plan *billing.Plan) (int, error) {
	ret := _m.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for InstancesCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) (int, error)); ok {
		return rf(ctx, plan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) int); ok {
		r0 = rf(ctx, plan)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingPlansController_InstancesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstancesCount'
type MockBillingPlansController_InstancesCount_Call struct {
	*mock.Call
}

// InstancesCount is a helper method to define mock.On call
//   - ctx context.Context
//   - plan *billing.Plan
func (_e *MockBillingPlansController_Expecter) InstancesCount(ctx interface{}, plan interface{}) *MockBillingPlansController_InstancesCount_Call {
	return &MockBillingPlansController_InstancesCount_Call{Call: _e.mock.On("InstancesCount", ctx, plan)}
}

func (_c *MockBillingPlansController_InstancesCount_Call) Run(run func(ctx context.Context, plan *billing.Plan)) *MockBillingPlansController_InstancesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Plan))
	})
	return _c
}

func (_c *MockBillingPlansController_InstancesCount_Call) Return(_a0 int, _a1 error) *MockBillingPlansController_InstancesCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillingPlansController_InstancesCount_Call) RunAndReturn(run func(context.Context, *billing.Plan) (int, error)) *MockBillingPlansController_InstancesCount_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, spUuid
func (_m *MockBillingPlansController) List(ctx context.Context, spUuid string) ([]*graph.BillingPlan, error) {
	ret := _m.Called(ctx, spUuid)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*graph.BillingPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*graph.BillingPlan, error)); ok {
		return rf(ctx, spUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*graph.BillingPlan); ok {
		r0 = rf(ctx, spUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*graph.BillingPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, spUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingPlansController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBillingPlansController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - spUuid string
func (_e *MockBillingPlansController_Expecter) List(ctx interface{}, spUuid interface{}) *MockBillingPlansController_List_Call {
	return &MockBillingPlansController_List_Call{Call: _e.mock.On("List", ctx, spUuid)}
}

func (_c *MockBillingPlansController_List_Call) Run(run func(ctx context.Context, spUuid string)) *MockBillingPlansController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBillingPlansController_List_Call) Return(_a0 []*graph.BillingPlan, _a1 error) *MockBillingPlansController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillingPlansController_List_Call) RunAndReturn(run func(context.Context, string) ([]*graph.BillingPlan, error)) *MockBillingPlansController_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, plan
func (_m *MockBillingPlansController) Update(ctx context.Context, plan *billing.Plan) (*graph.BillingPlan, error) {
	ret := _m.Called(ctx, plan)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *graph.BillingPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) (*graph.BillingPlan, error)); ok {
		return rf(ctx, plan)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Plan) *graph.BillingPlan); ok {
		r0 = rf(ctx, plan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.BillingPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.Plan) error); ok {
		r1 = rf(ctx, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingPlansController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBillingPlansController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - plan *billing.Plan
func (_e *MockBillingPlansController_Expecter) Update(ctx interface{}, plan interface{}) *MockBillingPlansController_Update_Call {
	return &MockBillingPlansController_Update_Call{Call: _e.mock.On("Update", ctx, plan)}
}

func (_c *MockBillingPlansController_Update_Call) Run(run func(ctx context.Context, plan *billing.Plan)) *MockBillingPlansController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Plan))
	})
	return _c
}

func (_c *MockBillingPlansController_Update_Call) Return(_a0 *graph.BillingPlan, _a1 error) *MockBillingPlansController_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillingPlansController_Update_Call) RunAndReturn(run func(context.Context, *billing.Plan) (*graph.BillingPlan, error)) *MockBillingPlansController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillingPlansController creates a new instance of MockBillingPlansController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillingPlansController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillingPlansController {
	mock := &MockBillingPlansController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
