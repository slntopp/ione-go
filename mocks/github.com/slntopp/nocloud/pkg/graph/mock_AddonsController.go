// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	addons "github.com/slntopp/nocloud-proto/billing/addons"

	mock "github.com/stretchr/testify/mock"
)

// MockAddonsController is an autogenerated mock type for the AddonsController type
type MockAddonsController struct {
	mock.Mock
}

type MockAddonsController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddonsController) EXPECT() *MockAddonsController_Expecter {
	return &MockAddonsController_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, req
func (_m *MockAddonsController) Count(ctx context.Context, req *addons.CountAddonsRequest) ([]*addons.Addon, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 []*addons.Addon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *addons.CountAddonsRequest) ([]*addons.Addon, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *addons.CountAddonsRequest) []*addons.Addon); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*addons.Addon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *addons.CountAddonsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockAddonsController_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - req *addons.CountAddonsRequest
func (_e *MockAddonsController_Expecter) Count(ctx interface{}, req interface{}) *MockAddonsController_Count_Call {
	return &MockAddonsController_Count_Call{Call: _e.mock.On("Count", ctx, req)}
}

func (_c *MockAddonsController_Count_Call) Run(run func(ctx context.Context, req *addons.CountAddonsRequest)) *MockAddonsController_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*addons.CountAddonsRequest))
	})
	return _c
}

func (_c *MockAddonsController_Count_Call) Return(_a0 []*addons.Addon, _a1 error) *MockAddonsController_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_Count_Call) RunAndReturn(run func(context.Context, *addons.CountAddonsRequest) ([]*addons.Addon, error)) *MockAddonsController_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, addon
func (_m *MockAddonsController) Create(ctx context.Context, addon *addons.Addon) (*addons.Addon, error) {
	ret := _m.Called(ctx, addon)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *addons.Addon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *addons.Addon) (*addons.Addon, error)); ok {
		return rf(ctx, addon)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *addons.Addon) *addons.Addon); ok {
		r0 = rf(ctx, addon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*addons.Addon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *addons.Addon) error); ok {
		r1 = rf(ctx, addon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAddonsController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - addon *addons.Addon
func (_e *MockAddonsController_Expecter) Create(ctx interface{}, addon interface{}) *MockAddonsController_Create_Call {
	return &MockAddonsController_Create_Call{Call: _e.mock.On("Create", ctx, addon)}
}

func (_c *MockAddonsController_Create_Call) Run(run func(ctx context.Context, addon *addons.Addon)) *MockAddonsController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*addons.Addon))
	})
	return _c
}

func (_c *MockAddonsController_Create_Call) Return(_a0 *addons.Addon, _a1 error) *MockAddonsController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_Create_Call) RunAndReturn(run func(context.Context, *addons.Addon) (*addons.Addon, error)) *MockAddonsController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBulk provides a mock function with given fields: ctx, _a1
func (_m *MockAddonsController) CreateBulk(ctx context.Context, _a1 []*addons.Addon) ([]*addons.Addon, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBulk")
	}

	var r0 []*addons.Addon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*addons.Addon) ([]*addons.Addon, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*addons.Addon) []*addons.Addon); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*addons.Addon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*addons.Addon) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_CreateBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBulk'
type MockAddonsController_CreateBulk_Call struct {
	*mock.Call
}

// CreateBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 []*addons.Addon
func (_e *MockAddonsController_Expecter) CreateBulk(ctx interface{}, _a1 interface{}) *MockAddonsController_CreateBulk_Call {
	return &MockAddonsController_CreateBulk_Call{Call: _e.mock.On("CreateBulk", ctx, _a1)}
}

func (_c *MockAddonsController_CreateBulk_Call) Run(run func(ctx context.Context, _a1 []*addons.Addon)) *MockAddonsController_CreateBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*addons.Addon))
	})
	return _c
}

func (_c *MockAddonsController_CreateBulk_Call) Return(_a0 []*addons.Addon, _a1 error) *MockAddonsController_CreateBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_CreateBulk_Call) RunAndReturn(run func(context.Context, []*addons.Addon) ([]*addons.Addon, error)) *MockAddonsController_CreateBulk_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, uuid
func (_m *MockAddonsController) Delete(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddonsController_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAddonsController_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockAddonsController_Expecter) Delete(ctx interface{}, uuid interface{}) *MockAddonsController_Delete_Call {
	return &MockAddonsController_Delete_Call{Call: _e.mock.On("Delete", ctx, uuid)}
}

func (_c *MockAddonsController_Delete_Call) Run(run func(ctx context.Context, uuid string)) *MockAddonsController_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAddonsController_Delete_Call) Return(_a0 error) *MockAddonsController_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddonsController_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockAddonsController_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *MockAddonsController) Get(ctx context.Context, uuid string) (*addons.Addon, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *addons.Addon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*addons.Addon, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *addons.Addon); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*addons.Addon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAddonsController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockAddonsController_Expecter) Get(ctx interface{}, uuid interface{}) *MockAddonsController_Get_Call {
	return &MockAddonsController_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *MockAddonsController_Get_Call) Run(run func(ctx context.Context, uuid string)) *MockAddonsController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAddonsController_Get_Call) Return(_a0 *addons.Addon, _a1 error) *MockAddonsController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_Get_Call) RunAndReturn(run func(context.Context, string) (*addons.Addon, error)) *MockAddonsController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnique provides a mock function with given fields: ctx
func (_m *MockAddonsController) GetUnique(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUnique")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_GetUnique_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnique'
type MockAddonsController_GetUnique_Call struct {
	*mock.Call
}

// GetUnique is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAddonsController_Expecter) GetUnique(ctx interface{}) *MockAddonsController_GetUnique_Call {
	return &MockAddonsController_GetUnique_Call{Call: _e.mock.On("GetUnique", ctx)}
}

func (_c *MockAddonsController_GetUnique_Call) Run(run func(ctx context.Context)) *MockAddonsController_GetUnique_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAddonsController_GetUnique_Call) Return(_a0 map[string]interface{}, _a1 error) *MockAddonsController_GetUnique_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_GetUnique_Call) RunAndReturn(run func(context.Context) (map[string]interface{}, error)) *MockAddonsController_GetUnique_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockAddonsController) List(ctx context.Context, req *addons.ListAddonsRequest) ([]*addons.Addon, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*addons.Addon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *addons.ListAddonsRequest) ([]*addons.Addon, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *addons.ListAddonsRequest) []*addons.Addon); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*addons.Addon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *addons.ListAddonsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAddonsController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *addons.ListAddonsRequest
func (_e *MockAddonsController_Expecter) List(ctx interface{}, req interface{}) *MockAddonsController_List_Call {
	return &MockAddonsController_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockAddonsController_List_Call) Run(run func(ctx context.Context, req *addons.ListAddonsRequest)) *MockAddonsController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*addons.ListAddonsRequest))
	})
	return _c
}

func (_c *MockAddonsController_List_Call) Return(_a0 []*addons.Addon, _a1 error) *MockAddonsController_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_List_Call) RunAndReturn(run func(context.Context, *addons.ListAddonsRequest) ([]*addons.Addon, error)) *MockAddonsController_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, addon
func (_m *MockAddonsController) Update(ctx context.Context, addon *addons.Addon) (*addons.Addon, error) {
	ret := _m.Called(ctx, addon)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *addons.Addon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *addons.Addon) (*addons.Addon, error)); ok {
		return rf(ctx, addon)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *addons.Addon) *addons.Addon); ok {
		r0 = rf(ctx, addon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*addons.Addon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *addons.Addon) error); ok {
		r1 = rf(ctx, addon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAddonsController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - addon *addons.Addon
func (_e *MockAddonsController_Expecter) Update(ctx interface{}, addon interface{}) *MockAddonsController_Update_Call {
	return &MockAddonsController_Update_Call{Call: _e.mock.On("Update", ctx, addon)}
}

func (_c *MockAddonsController_Update_Call) Run(run func(ctx context.Context, addon *addons.Addon)) *MockAddonsController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*addons.Addon))
	})
	return _c
}

func (_c *MockAddonsController_Update_Call) Return(_a0 *addons.Addon, _a1 error) *MockAddonsController_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_Update_Call) RunAndReturn(run func(context.Context, *addons.Addon) (*addons.Addon, error)) *MockAddonsController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBulk provides a mock function with given fields: ctx, _a1
func (_m *MockAddonsController) UpdateBulk(ctx context.Context, _a1 []*addons.Addon) ([]*addons.Addon, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBulk")
	}

	var r0 []*addons.Addon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*addons.Addon) ([]*addons.Addon, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*addons.Addon) []*addons.Addon); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*addons.Addon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*addons.Addon) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddonsController_UpdateBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBulk'
type MockAddonsController_UpdateBulk_Call struct {
	*mock.Call
}

// UpdateBulk is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 []*addons.Addon
func (_e *MockAddonsController_Expecter) UpdateBulk(ctx interface{}, _a1 interface{}) *MockAddonsController_UpdateBulk_Call {
	return &MockAddonsController_UpdateBulk_Call{Call: _e.mock.On("UpdateBulk", ctx, _a1)}
}

func (_c *MockAddonsController_UpdateBulk_Call) Run(run func(ctx context.Context, _a1 []*addons.Addon)) *MockAddonsController_UpdateBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*addons.Addon))
	})
	return _c
}

func (_c *MockAddonsController_UpdateBulk_Call) Return(_a0 []*addons.Addon, _a1 error) *MockAddonsController_UpdateBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddonsController_UpdateBulk_Call) RunAndReturn(run func(context.Context, []*addons.Addon) ([]*addons.Addon, error)) *MockAddonsController_UpdateBulk_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAddonsController creates a new instance of MockAddonsController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAddonsController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAddonsController {
	mock := &MockAddonsController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
