// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	context "context"

	billing "github.com/slntopp/nocloud-proto/billing"

	graph "github.com/slntopp/nocloud/pkg/graph"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionsController is an autogenerated mock type for the TransactionsController type
type MockTransactionsController struct {
	mock.Mock
}

type MockTransactionsController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionsController) EXPECT() *MockTransactionsController_Expecter {
	return &MockTransactionsController_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, tx
func (_m *MockTransactionsController) Create(ctx context.Context, tx *billing.Transaction) (*graph.Transaction, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *graph.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Transaction) (*graph.Transaction, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Transaction) *graph.Transaction); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*graph.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionsController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionsController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *billing.Transaction
func (_e *MockTransactionsController_Expecter) Create(ctx interface{}, tx interface{}) *MockTransactionsController_Create_Call {
	return &MockTransactionsController_Create_Call{Call: _e.mock.On("Create", ctx, tx)}
}

func (_c *MockTransactionsController_Create_Call) Run(run func(ctx context.Context, tx *billing.Transaction)) *MockTransactionsController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Transaction))
	})
	return _c
}

func (_c *MockTransactionsController_Create_Call) Return(_a0 *graph.Transaction, _a1 error) *MockTransactionsController_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionsController_Create_Call) RunAndReturn(run func(context.Context, *billing.Transaction) (*graph.Transaction, error)) *MockTransactionsController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *MockTransactionsController) Get(ctx context.Context, uuid string) (*billing.Transaction, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *billing.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*billing.Transaction, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.Transaction); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionsController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTransactionsController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockTransactionsController_Expecter) Get(ctx interface{}, uuid interface{}) *MockTransactionsController_Get_Call {
	return &MockTransactionsController_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *MockTransactionsController_Get_Call) Run(run func(ctx context.Context, uuid string)) *MockTransactionsController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTransactionsController_Get_Call) Return(_a0 *billing.Transaction, _a1 error) *MockTransactionsController_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionsController_Get_Call) RunAndReturn(run func(context.Context, string) (*billing.Transaction, error)) *MockTransactionsController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, tx
func (_m *MockTransactionsController) Update(ctx context.Context, tx *billing.Transaction) (*billing.Transaction, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *billing.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Transaction) (*billing.Transaction, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Transaction) *billing.Transaction); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionsController_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTransactionsController_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - tx *billing.Transaction
func (_e *MockTransactionsController_Expecter) Update(ctx interface{}, tx interface{}) *MockTransactionsController_Update_Call {
	return &MockTransactionsController_Update_Call{Call: _e.mock.On("Update", ctx, tx)}
}

func (_c *MockTransactionsController_Update_Call) Run(run func(ctx context.Context, tx *billing.Transaction)) *MockTransactionsController_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Transaction))
	})
	return _c
}

func (_c *MockTransactionsController_Update_Call) Return(_a0 *billing.Transaction, _a1 error) *MockTransactionsController_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionsController_Update_Call) RunAndReturn(run func(context.Context, *billing.Transaction) (*billing.Transaction, error)) *MockTransactionsController_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionsController creates a new instance of MockTransactionsController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionsController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionsController {
	mock := &MockTransactionsController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
