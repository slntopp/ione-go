// Code generated by mockery v2.43.2. DO NOT EDIT.

package graph_mocks

import (
	connect "connectrpc.com/connect"
	billing "github.com/slntopp/nocloud-proto/billing"

	context "context"

	driver "github.com/arangodb/go-driver"

	mock "github.com/stretchr/testify/mock"
)

// MockRecordsController is an autogenerated mock type for the RecordsController type
type MockRecordsController struct {
	mock.Mock
}

type MockRecordsController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecordsController) EXPECT() *MockRecordsController_Expecter {
	return &MockRecordsController_Expecter{mock: &_m.Mock}
}

// CheckOverlapping provides a mock function with given fields: ctx, r
func (_m *MockRecordsController) CheckOverlapping(ctx context.Context, r *billing.Record) bool {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for CheckOverlapping")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Record) bool); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRecordsController_CheckOverlapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOverlapping'
type MockRecordsController_CheckOverlapping_Call struct {
	*mock.Call
}

// CheckOverlapping is a helper method to define mock.On call
//   - ctx context.Context
//   - r *billing.Record
func (_e *MockRecordsController_Expecter) CheckOverlapping(ctx interface{}, r interface{}) *MockRecordsController_CheckOverlapping_Call {
	return &MockRecordsController_CheckOverlapping_Call{Call: _e.mock.On("CheckOverlapping", ctx, r)}
}

func (_c *MockRecordsController_CheckOverlapping_Call) Run(run func(ctx context.Context, r *billing.Record)) *MockRecordsController_CheckOverlapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Record))
	})
	return _c
}

func (_c *MockRecordsController_CheckOverlapping_Call) Return(ok bool) *MockRecordsController_CheckOverlapping_Call {
	_c.Call.Return(ok)
	return _c
}

func (_c *MockRecordsController_CheckOverlapping_Call) RunAndReturn(run func(context.Context, *billing.Record) bool) *MockRecordsController_CheckOverlapping_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, r
func (_m *MockRecordsController) Create(ctx context.Context, r *billing.Record) driver.DocumentID {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 driver.DocumentID
	if rf, ok := ret.Get(0).(func(context.Context, *billing.Record) driver.DocumentID); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(driver.DocumentID)
	}

	return r0
}

// MockRecordsController_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRecordsController_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - r *billing.Record
func (_e *MockRecordsController_Expecter) Create(ctx interface{}, r interface{}) *MockRecordsController_Create_Call {
	return &MockRecordsController_Create_Call{Call: _e.mock.On("Create", ctx, r)}
}

func (_c *MockRecordsController_Create_Call) Run(run func(ctx context.Context, r *billing.Record)) *MockRecordsController_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.Record))
	})
	return _c
}

func (_c *MockRecordsController_Create_Call) Return(_a0 driver.DocumentID) *MockRecordsController_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecordsController_Create_Call) RunAndReturn(run func(context.Context, *billing.Record) driver.DocumentID) *MockRecordsController_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, tr
func (_m *MockRecordsController) Get(ctx context.Context, tr string) ([]*billing.Record, error) {
	ret := _m.Called(ctx, tr)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*billing.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*billing.Record, error)); ok {
		return rf(ctx, tr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*billing.Record); ok {
		r0 = rf(ctx, tr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecordsController_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRecordsController_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - tr string
func (_e *MockRecordsController_Expecter) Get(ctx interface{}, tr interface{}) *MockRecordsController_Get_Call {
	return &MockRecordsController_Get_Call{Call: _e.mock.On("Get", ctx, tr)}
}

func (_c *MockRecordsController_Get_Call) Run(run func(ctx context.Context, tr string)) *MockRecordsController_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRecordsController_Get_Call) Return(res []*billing.Record, err error) *MockRecordsController_Get_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockRecordsController_Get_Call) RunAndReturn(run func(context.Context, string) ([]*billing.Record, error)) *MockRecordsController_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstancesReports provides a mock function with given fields: ctx, req
func (_m *MockRecordsController) GetInstancesReports(ctx context.Context, req *billing.GetInstancesReportRequest) ([]*billing.InstanceReport, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesReports")
	}

	var r0 []*billing.InstanceReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetInstancesReportRequest) ([]*billing.InstanceReport, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetInstancesReportRequest) []*billing.InstanceReport); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billing.InstanceReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetInstancesReportRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecordsController_GetInstancesReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstancesReports'
type MockRecordsController_GetInstancesReports_Call struct {
	*mock.Call
}

// GetInstancesReports is a helper method to define mock.On call
//   - ctx context.Context
//   - req *billing.GetInstancesReportRequest
func (_e *MockRecordsController_Expecter) GetInstancesReports(ctx interface{}, req interface{}) *MockRecordsController_GetInstancesReports_Call {
	return &MockRecordsController_GetInstancesReports_Call{Call: _e.mock.On("GetInstancesReports", ctx, req)}
}

func (_c *MockRecordsController_GetInstancesReports_Call) Run(run func(ctx context.Context, req *billing.GetInstancesReportRequest)) *MockRecordsController_GetInstancesReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.GetInstancesReportRequest))
	})
	return _c
}

func (_c *MockRecordsController_GetInstancesReports_Call) Return(_a0 []*billing.InstanceReport, _a1 error) *MockRecordsController_GetInstancesReports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecordsController_GetInstancesReports_Call) RunAndReturn(run func(context.Context, *billing.GetInstancesReportRequest) ([]*billing.InstanceReport, error)) *MockRecordsController_GetInstancesReports_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstancesReportsCount provides a mock function with given fields: ctx
func (_m *MockRecordsController) GetInstancesReportsCount(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesReportsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecordsController_GetInstancesReportsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstancesReportsCount'
type MockRecordsController_GetInstancesReportsCount_Call struct {
	*mock.Call
}

// GetInstancesReportsCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRecordsController_Expecter) GetInstancesReportsCount(ctx interface{}) *MockRecordsController_GetInstancesReportsCount_Call {
	return &MockRecordsController_GetInstancesReportsCount_Call{Call: _e.mock.On("GetInstancesReportsCount", ctx)}
}

func (_c *MockRecordsController_GetInstancesReportsCount_Call) Run(run func(ctx context.Context)) *MockRecordsController_GetInstancesReportsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRecordsController_GetInstancesReportsCount_Call) Return(_a0 int64, _a1 error) *MockRecordsController_GetInstancesReportsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecordsController_GetInstancesReportsCount_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockRecordsController_GetInstancesReportsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordsReports provides a mock function with given fields: ctx, req
func (_m *MockRecordsController) GetRecordsReports(ctx context.Context, req *billing.GetRecordsReportsRequest) (*connect.Response[billing.GetRecordsReportsResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordsReports")
	}

	var r0 *connect.Response[billing.GetRecordsReportsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetRecordsReportsRequest) (*connect.Response[billing.GetRecordsReportsResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetRecordsReportsRequest) *connect.Response[billing.GetRecordsReportsResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[billing.GetRecordsReportsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetRecordsReportsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecordsController_GetRecordsReports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordsReports'
type MockRecordsController_GetRecordsReports_Call struct {
	*mock.Call
}

// GetRecordsReports is a helper method to define mock.On call
//   - ctx context.Context
//   - req *billing.GetRecordsReportsRequest
func (_e *MockRecordsController_Expecter) GetRecordsReports(ctx interface{}, req interface{}) *MockRecordsController_GetRecordsReports_Call {
	return &MockRecordsController_GetRecordsReports_Call{Call: _e.mock.On("GetRecordsReports", ctx, req)}
}

func (_c *MockRecordsController_GetRecordsReports_Call) Run(run func(ctx context.Context, req *billing.GetRecordsReportsRequest)) *MockRecordsController_GetRecordsReports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.GetRecordsReportsRequest))
	})
	return _c
}

func (_c *MockRecordsController_GetRecordsReports_Call) Return(_a0 *connect.Response[billing.GetRecordsReportsResponse], _a1 error) *MockRecordsController_GetRecordsReports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecordsController_GetRecordsReports_Call) RunAndReturn(run func(context.Context, *billing.GetRecordsReportsRequest) (*connect.Response[billing.GetRecordsReportsResponse], error)) *MockRecordsController_GetRecordsReports_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordsReportsCount provides a mock function with given fields: ctx, req
func (_m *MockRecordsController) GetRecordsReportsCount(ctx context.Context, req *billing.GetRecordsReportsCountRequest) (int64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordsReportsCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetRecordsReportsCountRequest) (int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetRecordsReportsCountRequest) int64); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetRecordsReportsCountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecordsController_GetRecordsReportsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordsReportsCount'
type MockRecordsController_GetRecordsReportsCount_Call struct {
	*mock.Call
}

// GetRecordsReportsCount is a helper method to define mock.On call
//   - ctx context.Context
//   - req *billing.GetRecordsReportsCountRequest
func (_e *MockRecordsController_Expecter) GetRecordsReportsCount(ctx interface{}, req interface{}) *MockRecordsController_GetRecordsReportsCount_Call {
	return &MockRecordsController_GetRecordsReportsCount_Call{Call: _e.mock.On("GetRecordsReportsCount", ctx, req)}
}

func (_c *MockRecordsController_GetRecordsReportsCount_Call) Run(run func(ctx context.Context, req *billing.GetRecordsReportsCountRequest)) *MockRecordsController_GetRecordsReportsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*billing.GetRecordsReportsCountRequest))
	})
	return _c
}

func (_c *MockRecordsController_GetRecordsReportsCount_Call) Return(_a0 int64, _a1 error) *MockRecordsController_GetRecordsReportsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecordsController_GetRecordsReportsCount_Call) RunAndReturn(run func(context.Context, *billing.GetRecordsReportsCountRequest) (int64, error)) *MockRecordsController_GetRecordsReportsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnique provides a mock function with given fields: ctx
func (_m *MockRecordsController) GetUnique(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUnique")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecordsController_GetUnique_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnique'
type MockRecordsController_GetUnique_Call struct {
	*mock.Call
}

// GetUnique is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRecordsController_Expecter) GetUnique(ctx interface{}) *MockRecordsController_GetUnique_Call {
	return &MockRecordsController_GetUnique_Call{Call: _e.mock.On("GetUnique", ctx)}
}

func (_c *MockRecordsController_GetUnique_Call) Run(run func(ctx context.Context)) *MockRecordsController_GetUnique_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRecordsController_GetUnique_Call) Return(_a0 map[string]interface{}, _a1 error) *MockRecordsController_GetUnique_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecordsController_GetUnique_Call) RunAndReturn(run func(context.Context) (map[string]interface{}, error)) *MockRecordsController_GetUnique_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecordsController creates a new instance of MockRecordsController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecordsController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecordsController {
	mock := &MockRecordsController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
