// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// ClientDatabases is an autogenerated mock type for the ClientDatabases type
type ClientDatabases struct {
	mock.Mock
}

// AccessibleDatabases provides a mock function with given fields: ctx
func (_m *ClientDatabases) AccessibleDatabases(ctx context.Context) ([]driver.Database, error) {
	ret := _m.Called(ctx)

	var r0 []driver.Database
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Database); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatabase provides a mock function with given fields: ctx, name, options
func (_m *ClientDatabases) CreateDatabase(ctx context.Context, name string, options *driver.CreateDatabaseOptions) (driver.Database, error) {
	ret := _m.Called(ctx, name, options)

	var r0 driver.Database
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateDatabaseOptions) driver.Database); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.CreateDatabaseOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database provides a mock function with given fields: ctx, name
func (_m *ClientDatabases) Database(ctx context.Context, name string) (driver.Database, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.Database
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Database); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseExists provides a mock function with given fields: ctx, name
func (_m *ClientDatabases) DatabaseExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Databases provides a mock function with given fields: ctx
func (_m *ClientDatabases) Databases(ctx context.Context) ([]driver.Database, error) {
	ret := _m.Called(ctx)

	var r0 []driver.Database
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Database); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
