// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// Request is an autogenerated mock type for the Request type
type Request struct {
	mock.Mock
}

// Clone provides a mock function with given fields:
func (_m *Request) Clone() driver.Request {
	ret := _m.Called()

	var r0 driver.Request
	if rf, ok := ret.Get(0).(func() driver.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Request)
		}
	}

	return r0
}

// SetBody provides a mock function with given fields: body
func (_m *Request) SetBody(body ...interface{}) (driver.Request, error) {
	var _ca []interface{}
	_ca = append(_ca, body...)
	ret := _m.Called(_ca...)

	var r0 driver.Request
	if rf, ok := ret.Get(0).(func(...interface{}) driver.Request); ok {
		r0 = rf(body...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(body...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBodyArray provides a mock function with given fields: bodyArray, mergeArray
func (_m *Request) SetBodyArray(bodyArray interface{}, mergeArray []map[string]interface{}) (driver.Request, error) {
	ret := _m.Called(bodyArray, mergeArray)

	var r0 driver.Request
	if rf, ok := ret.Get(0).(func(interface{}, []map[string]interface{}) driver.Request); ok {
		r0 = rf(bodyArray, mergeArray)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, []map[string]interface{}) error); ok {
		r1 = rf(bodyArray, mergeArray)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBodyImportArray provides a mock function with given fields: bodyArray
func (_m *Request) SetBodyImportArray(bodyArray interface{}) (driver.Request, error) {
	ret := _m.Called(bodyArray)

	var r0 driver.Request
	if rf, ok := ret.Get(0).(func(interface{}) driver.Request); ok {
		r0 = rf(bodyArray)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(bodyArray)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetHeader provides a mock function with given fields: key, value
func (_m *Request) SetHeader(key string, value string) driver.Request {
	ret := _m.Called(key, value)

	var r0 driver.Request
	if rf, ok := ret.Get(0).(func(string, string) driver.Request); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Request)
		}
	}

	return r0
}

// SetQuery provides a mock function with given fields: key, value
func (_m *Request) SetQuery(key string, value string) driver.Request {
	ret := _m.Called(key, value)

	var r0 driver.Request
	if rf, ok := ret.Get(0).(func(string, string) driver.Request); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Request)
		}
	}

	return r0
}

// Written provides a mock function with given fields:
func (_m *Request) Written() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
