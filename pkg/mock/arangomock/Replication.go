// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Replication is an autogenerated mock type for the Replication type
type Replication struct {
	mock.Mock
}

// CreateBatch provides a mock function with given fields: ctx, db, serverID, ttl
func (_m *Replication) CreateBatch(ctx context.Context, db driver.Database, serverID int64, ttl time.Duration) (driver.Batch, error) {
	ret := _m.Called(ctx, db, serverID, ttl)

	var r0 driver.Batch
	if rf, ok := ret.Get(0).(func(context.Context, driver.Database, int64, time.Duration) driver.Batch); ok {
		r0 = rf(ctx, db, serverID, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, driver.Database, int64, time.Duration) error); ok {
		r1 = rf(ctx, db, serverID, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseInventory provides a mock function with given fields: ctx, db
func (_m *Replication) DatabaseInventory(ctx context.Context, db driver.Database) (driver.DatabaseInventory, error) {
	ret := _m.Called(ctx, db)

	var r0 driver.DatabaseInventory
	if rf, ok := ret.Get(0).(func(context.Context, driver.Database) driver.DatabaseInventory); ok {
		r0 = rf(ctx, db)
	} else {
		r0 = ret.Get(0).(driver.DatabaseInventory)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, driver.Database) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
