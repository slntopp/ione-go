// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// Response is an autogenerated mock type for the Response type
type Response struct {
	mock.Mock
}

// CheckStatus provides a mock function with given fields: validStatusCodes
func (_m *Response) CheckStatus(validStatusCodes ...int) error {
	_va := make([]interface{}, len(validStatusCodes))
	for _i := range validStatusCodes {
		_va[_i] = validStatusCodes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...int) error); ok {
		r0 = rf(validStatusCodes...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Endpoint provides a mock function with given fields:
func (_m *Response) Endpoint() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Header provides a mock function with given fields: key
func (_m *Response) Header(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParseArrayBody provides a mock function with given fields:
func (_m *Response) ParseArrayBody() ([]driver.Response, error) {
	ret := _m.Called()

	var r0 []driver.Response
	if rf, ok := ret.Get(0).(func() []driver.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseBody provides a mock function with given fields: field, result
func (_m *Response) ParseBody(field string, result interface{}) error {
	ret := _m.Called(field, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(field, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatusCode provides a mock function with given fields:
func (_m *Response) StatusCode() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
