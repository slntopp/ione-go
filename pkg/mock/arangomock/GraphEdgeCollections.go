// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// GraphEdgeCollections is an autogenerated mock type for the GraphEdgeCollections type
type GraphEdgeCollections struct {
	mock.Mock
}

// CreateEdgeCollection provides a mock function with given fields: ctx, collection, constraints
func (_m *GraphEdgeCollections) CreateEdgeCollection(ctx context.Context, collection string, constraints driver.VertexConstraints) (driver.Collection, error) {
	ret := _m.Called(ctx, collection, constraints)

	var r0 driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string, driver.VertexConstraints) driver.Collection); ok {
		r0 = rf(ctx, collection, constraints)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, driver.VertexConstraints) error); ok {
		r1 = rf(ctx, collection, constraints)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EdgeCollection provides a mock function with given fields: ctx, name
func (_m *GraphEdgeCollections) EdgeCollection(ctx context.Context, name string) (driver.Collection, driver.VertexConstraints, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Collection); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	var r1 driver.VertexConstraints
	if rf, ok := ret.Get(1).(func(context.Context, string) driver.VertexConstraints); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Get(1).(driver.VertexConstraints)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EdgeCollectionExists provides a mock function with given fields: ctx, name
func (_m *GraphEdgeCollections) EdgeCollectionExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EdgeCollections provides a mock function with given fields: ctx
func (_m *GraphEdgeCollections) EdgeCollections(ctx context.Context) ([]driver.Collection, []driver.VertexConstraints, error) {
	ret := _m.Called(ctx)

	var r0 []driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Collection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Collection)
		}
	}

	var r1 []driver.VertexConstraints
	if rf, ok := ret.Get(1).(func(context.Context) []driver.VertexConstraints); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]driver.VertexConstraints)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetVertexConstraints provides a mock function with given fields: ctx, collection, constraints
func (_m *GraphEdgeCollections) SetVertexConstraints(ctx context.Context, collection string, constraints driver.VertexConstraints) error {
	ret := _m.Called(ctx, collection, constraints)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, driver.VertexConstraints) error); ok {
		r0 = rf(ctx, collection, constraints)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
