// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Collection provides a mock function with given fields: ctx, name
func (_m *Database) Collection(ctx context.Context, name string) (driver.Collection, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Collection); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectionExists provides a mock function with given fields: ctx, name
func (_m *Database) CollectionExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Collections provides a mock function with given fields: ctx
func (_m *Database) Collections(ctx context.Context) ([]driver.Collection, error) {
	ret := _m.Called(ctx)

	var r0 []driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Collection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArangoSearchView provides a mock function with given fields: ctx, name, options
func (_m *Database) CreateArangoSearchView(ctx context.Context, name string, options *driver.ArangoSearchViewProperties) (driver.ArangoSearchView, error) {
	ret := _m.Called(ctx, name, options)

	var r0 driver.ArangoSearchView
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.ArangoSearchViewProperties) driver.ArangoSearchView); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.ArangoSearchView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.ArangoSearchViewProperties) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCollection provides a mock function with given fields: ctx, name, options
func (_m *Database) CreateCollection(ctx context.Context, name string, options *driver.CreateCollectionOptions) (driver.Collection, error) {
	ret := _m.Called(ctx, name, options)

	var r0 driver.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateCollectionOptions) driver.Collection); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.CreateCollectionOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGraph provides a mock function with given fields: ctx, name, options
func (_m *Database) CreateGraph(ctx context.Context, name string, options *driver.CreateGraphOptions) (driver.Graph, error) {
	ret := _m.Called(ctx, name, options)

	var r0 driver.Graph
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateGraphOptions) driver.Graph); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Graph)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.CreateGraphOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EngineInfo provides a mock function with given fields: ctx
func (_m *Database) EngineInfo(ctx context.Context) (driver.EngineInfo, error) {
	ret := _m.Called(ctx)

	var r0 driver.EngineInfo
	if rf, ok := ret.Get(0).(func(context.Context) driver.EngineInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.EngineInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Graph provides a mock function with given fields: ctx, name
func (_m *Database) Graph(ctx context.Context, name string) (driver.Graph, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.Graph
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Graph); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Graph)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GraphExists provides a mock function with given fields: ctx, name
func (_m *Database) GraphExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Graphs provides a mock function with given fields: ctx
func (_m *Database) Graphs(ctx context.Context) ([]driver.Graph, error) {
	ret := _m.Called(ctx)

	var r0 []driver.Graph
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Graph); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Graph)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: ctx
func (_m *Database) Info(ctx context.Context) (driver.DatabaseInfo, error) {
	ret := _m.Called(ctx)

	var r0 driver.DatabaseInfo
	if rf, ok := ret.Get(0).(func(context.Context) driver.DatabaseInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.DatabaseInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Database) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Query provides a mock function with given fields: ctx, query, bindVars
func (_m *Database) Query(ctx context.Context, query string, bindVars map[string]interface{}) (driver.Cursor, error) {
	ret := _m.Called(ctx, query, bindVars)

	var r0 driver.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) driver.Cursor); ok {
		r0 = rf(ctx, query, bindVars)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, query, bindVars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx
func (_m *Database) Remove(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: ctx, action, options
func (_m *Database) Transaction(ctx context.Context, action string, options *driver.TransactionOptions) (interface{}, error) {
	ret := _m.Called(ctx, action, options)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.TransactionOptions) interface{}); ok {
		r0 = rf(ctx, action, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.TransactionOptions) error); ok {
		r1 = rf(ctx, action, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateQuery provides a mock function with given fields: ctx, query
func (_m *Database) ValidateQuery(ctx context.Context, query string) error {
	ret := _m.Called(ctx, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// View provides a mock function with given fields: ctx, name
func (_m *Database) View(ctx context.Context, name string) (driver.View, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.View
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.View); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.View)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewExists provides a mock function with given fields: ctx, name
func (_m *Database) ViewExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Views provides a mock function with given fields: ctx
func (_m *Database) Views(ctx context.Context) ([]driver.View, error) {
	ret := _m.Called(ctx)

	var r0 []driver.View
	if rf, ok := ret.Get(0).(func(context.Context) []driver.View); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.View)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
