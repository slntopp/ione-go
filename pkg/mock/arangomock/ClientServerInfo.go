// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// ClientServerInfo is an autogenerated mock type for the ClientServerInfo type
type ClientServerInfo struct {
	mock.Mock
}

// ServerID provides a mock function with given fields: ctx
func (_m *ClientServerInfo) ServerID(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerRole provides a mock function with given fields: ctx
func (_m *ClientServerInfo) ServerRole(ctx context.Context) (driver.ServerRole, error) {
	ret := _m.Called(ctx)

	var r0 driver.ServerRole
	if rf, ok := ret.Get(0).(func(context.Context) driver.ServerRole); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.ServerRole)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: ctx
func (_m *ClientServerInfo) Version(ctx context.Context) (driver.VersionInfo, error) {
	ret := _m.Called(ctx)

	var r0 driver.VersionInfo
	if rf, ok := ret.Get(0).(func(context.Context) driver.VersionInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.VersionInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
