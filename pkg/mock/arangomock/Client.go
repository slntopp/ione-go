// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AccessibleDatabases provides a mock function with given fields: ctx
func (_m *Client) AccessibleDatabases(ctx context.Context) ([]driver.Database, error) {
	ret := _m.Called(ctx)

	var r0 []driver.Database
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Database); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cluster provides a mock function with given fields: ctx
func (_m *Client) Cluster(ctx context.Context) (driver.Cluster, error) {
	ret := _m.Called(ctx)

	var r0 driver.Cluster
	if rf, ok := ret.Get(0).(func(context.Context) driver.Cluster); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connection provides a mock function with given fields:
func (_m *Client) Connection() driver.Connection {
	ret := _m.Called()

	var r0 driver.Connection
	if rf, ok := ret.Get(0).(func() driver.Connection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Connection)
		}
	}

	return r0
}

// CreateDatabase provides a mock function with given fields: ctx, name, options
func (_m *Client) CreateDatabase(ctx context.Context, name string, options *driver.CreateDatabaseOptions) (driver.Database, error) {
	ret := _m.Called(ctx, name, options)

	var r0 driver.Database
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.CreateDatabaseOptions) driver.Database); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.CreateDatabaseOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, name, options
func (_m *Client) CreateUser(ctx context.Context, name string, options *driver.UserOptions) (driver.User, error) {
	ret := _m.Called(ctx, name, options)

	var r0 driver.User
	if rf, ok := ret.Get(0).(func(context.Context, string, *driver.UserOptions) driver.User); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *driver.UserOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database provides a mock function with given fields: ctx, name
func (_m *Client) Database(ctx context.Context, name string) (driver.Database, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.Database
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.Database); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseExists provides a mock function with given fields: ctx, name
func (_m *Client) DatabaseExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Databases provides a mock function with given fields: ctx
func (_m *Client) Databases(ctx context.Context) ([]driver.Database, error) {
	ret := _m.Called(ctx)

	var r0 []driver.Database
	if rf, ok := ret.Get(0).(func(context.Context) []driver.Database); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Replication provides a mock function with given fields:
func (_m *Client) Replication() driver.Replication {
	ret := _m.Called()

	var r0 driver.Replication
	if rf, ok := ret.Get(0).(func() driver.Replication); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Replication)
		}
	}

	return r0
}

// ServerID provides a mock function with given fields: ctx
func (_m *Client) ServerID(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerMode provides a mock function with given fields: ctx
func (_m *Client) ServerMode(ctx context.Context) (driver.ServerMode, error) {
	ret := _m.Called(ctx)

	var r0 driver.ServerMode
	if rf, ok := ret.Get(0).(func(context.Context) driver.ServerMode); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.ServerMode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerRole provides a mock function with given fields: ctx
func (_m *Client) ServerRole(ctx context.Context) (driver.ServerRole, error) {
	ret := _m.Called(ctx)

	var r0 driver.ServerRole
	if rf, ok := ret.Get(0).(func(context.Context) driver.ServerRole); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.ServerRole)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetServerMode provides a mock function with given fields: ctx, mode
func (_m *Client) SetServerMode(ctx context.Context, mode driver.ServerMode) error {
	ret := _m.Called(ctx, mode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.ServerMode) error); ok {
		r0 = rf(ctx, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx, removeFromCluster
func (_m *Client) Shutdown(ctx context.Context, removeFromCluster bool) error {
	ret := _m.Called(ctx, removeFromCluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, removeFromCluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SynchronizeEndpoints provides a mock function with given fields: ctx
func (_m *Client) SynchronizeEndpoints(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User provides a mock function with given fields: ctx, name
func (_m *Client) User(ctx context.Context, name string) (driver.User, error) {
	ret := _m.Called(ctx, name)

	var r0 driver.User
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserExists provides a mock function with given fields: ctx, name
func (_m *Client) UserExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx
func (_m *Client) Users(ctx context.Context) ([]driver.User, error) {
	ret := _m.Called(ctx)

	var r0 []driver.User
	if rf, ok := ret.Get(0).(func(context.Context) []driver.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]driver.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Version provides a mock function with given fields: ctx
func (_m *Client) Version(ctx context.Context) (driver.VersionInfo, error) {
	ret := _m.Called(ctx)

	var r0 driver.VersionInfo
	if rf, ok := ret.Get(0).(func(context.Context) driver.VersionInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.VersionInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
