// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// CollectionDocuments is an autogenerated mock type for the CollectionDocuments type
type CollectionDocuments struct {
	mock.Mock
}

// CreateDocument provides a mock function with given fields: ctx, document
func (_m *CollectionDocuments) CreateDocument(ctx context.Context, document interface{}) (driver.DocumentMeta, error) {
	ret := _m.Called(ctx, document)

	var r0 driver.DocumentMeta
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) driver.DocumentMeta); ok {
		r0 = rf(ctx, document)
	} else {
		r0 = ret.Get(0).(driver.DocumentMeta)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDocuments provides a mock function with given fields: ctx, documents
func (_m *CollectionDocuments) CreateDocuments(ctx context.Context, documents interface{}) (driver.DocumentMetaSlice, driver.ErrorSlice, error) {
	ret := _m.Called(ctx, documents)

	var r0 driver.DocumentMetaSlice
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) driver.DocumentMetaSlice); ok {
		r0 = rf(ctx, documents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.DocumentMetaSlice)
		}
	}

	var r1 driver.ErrorSlice
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) driver.ErrorSlice); ok {
		r1 = rf(ctx, documents)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(driver.ErrorSlice)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, interface{}) error); ok {
		r2 = rf(ctx, documents)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DocumentExists provides a mock function with given fields: ctx, key
func (_m *CollectionDocuments) DocumentExists(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportDocuments provides a mock function with given fields: ctx, documents, options
func (_m *CollectionDocuments) ImportDocuments(ctx context.Context, documents interface{}, options *driver.ImportDocumentOptions) (driver.ImportDocumentStatistics, error) {
	ret := _m.Called(ctx, documents, options)

	var r0 driver.ImportDocumentStatistics
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *driver.ImportDocumentOptions) driver.ImportDocumentStatistics); ok {
		r0 = rf(ctx, documents, options)
	} else {
		r0 = ret.Get(0).(driver.ImportDocumentStatistics)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, *driver.ImportDocumentOptions) error); ok {
		r1 = rf(ctx, documents, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDocument provides a mock function with given fields: ctx, key, result
func (_m *CollectionDocuments) ReadDocument(ctx context.Context, key string, result interface{}) (driver.DocumentMeta, error) {
	ret := _m.Called(ctx, key, result)

	var r0 driver.DocumentMeta
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) driver.DocumentMeta); ok {
		r0 = rf(ctx, key, result)
	} else {
		r0 = ret.Get(0).(driver.DocumentMeta)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, result)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDocuments provides a mock function with given fields: ctx, keys, results
func (_m *CollectionDocuments) ReadDocuments(ctx context.Context, keys []string, results interface{}) (driver.DocumentMetaSlice, driver.ErrorSlice, error) {
	ret := _m.Called(ctx, keys, results)

	var r0 driver.DocumentMetaSlice
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) driver.DocumentMetaSlice); ok {
		r0 = rf(ctx, keys, results)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.DocumentMetaSlice)
		}
	}

	var r1 driver.ErrorSlice
	if rf, ok := ret.Get(1).(func(context.Context, []string, interface{}) driver.ErrorSlice); ok {
		r1 = rf(ctx, keys, results)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(driver.ErrorSlice)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []string, interface{}) error); ok {
		r2 = rf(ctx, keys, results)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveDocument provides a mock function with given fields: ctx, key
func (_m *CollectionDocuments) RemoveDocument(ctx context.Context, key string) (driver.DocumentMeta, error) {
	ret := _m.Called(ctx, key)

	var r0 driver.DocumentMeta
	if rf, ok := ret.Get(0).(func(context.Context, string) driver.DocumentMeta); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(driver.DocumentMeta)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDocuments provides a mock function with given fields: ctx, keys
func (_m *CollectionDocuments) RemoveDocuments(ctx context.Context, keys []string) (driver.DocumentMetaSlice, driver.ErrorSlice, error) {
	ret := _m.Called(ctx, keys)

	var r0 driver.DocumentMetaSlice
	if rf, ok := ret.Get(0).(func(context.Context, []string) driver.DocumentMetaSlice); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.DocumentMetaSlice)
		}
	}

	var r1 driver.ErrorSlice
	if rf, ok := ret.Get(1).(func(context.Context, []string) driver.ErrorSlice); ok {
		r1 = rf(ctx, keys)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(driver.ErrorSlice)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []string) error); ok {
		r2 = rf(ctx, keys)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReplaceDocument provides a mock function with given fields: ctx, key, document
func (_m *CollectionDocuments) ReplaceDocument(ctx context.Context, key string, document interface{}) (driver.DocumentMeta, error) {
	ret := _m.Called(ctx, key, document)

	var r0 driver.DocumentMeta
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) driver.DocumentMeta); ok {
		r0 = rf(ctx, key, document)
	} else {
		r0 = ret.Get(0).(driver.DocumentMeta)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceDocuments provides a mock function with given fields: ctx, keys, documents
func (_m *CollectionDocuments) ReplaceDocuments(ctx context.Context, keys []string, documents interface{}) (driver.DocumentMetaSlice, driver.ErrorSlice, error) {
	ret := _m.Called(ctx, keys, documents)

	var r0 driver.DocumentMetaSlice
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) driver.DocumentMetaSlice); ok {
		r0 = rf(ctx, keys, documents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.DocumentMetaSlice)
		}
	}

	var r1 driver.ErrorSlice
	if rf, ok := ret.Get(1).(func(context.Context, []string, interface{}) driver.ErrorSlice); ok {
		r1 = rf(ctx, keys, documents)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(driver.ErrorSlice)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []string, interface{}) error); ok {
		r2 = rf(ctx, keys, documents)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateDocument provides a mock function with given fields: ctx, key, update
func (_m *CollectionDocuments) UpdateDocument(ctx context.Context, key string, update interface{}) (driver.DocumentMeta, error) {
	ret := _m.Called(ctx, key, update)

	var r0 driver.DocumentMeta
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) driver.DocumentMeta); ok {
		r0 = rf(ctx, key, update)
	} else {
		r0 = ret.Get(0).(driver.DocumentMeta)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDocuments provides a mock function with given fields: ctx, keys, updates
func (_m *CollectionDocuments) UpdateDocuments(ctx context.Context, keys []string, updates interface{}) (driver.DocumentMetaSlice, driver.ErrorSlice, error) {
	ret := _m.Called(ctx, keys, updates)

	var r0 driver.DocumentMetaSlice
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) driver.DocumentMetaSlice); ok {
		r0 = rf(ctx, keys, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.DocumentMetaSlice)
		}
	}

	var r1 driver.ErrorSlice
	if rf, ok := ret.Get(1).(func(context.Context, []string, interface{}) driver.ErrorSlice); ok {
		r1 = rf(ctx, keys, updates)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(driver.ErrorSlice)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []string, interface{}) error); ok {
		r2 = rf(ctx, keys, updates)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
