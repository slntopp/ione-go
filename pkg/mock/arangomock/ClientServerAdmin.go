// Code generated by mockery v1.0.0. DO NOT EDIT.

package arangomock

import context "context"
import driver "github.com/arangodb/go-driver"
import mock "github.com/stretchr/testify/mock"

// ClientServerAdmin is an autogenerated mock type for the ClientServerAdmin type
type ClientServerAdmin struct {
	mock.Mock
}

// ServerMode provides a mock function with given fields: ctx
func (_m *ClientServerAdmin) ServerMode(ctx context.Context) (driver.ServerMode, error) {
	ret := _m.Called(ctx)

	var r0 driver.ServerMode
	if rf, ok := ret.Get(0).(func(context.Context) driver.ServerMode); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(driver.ServerMode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetServerMode provides a mock function with given fields: ctx, mode
func (_m *ClientServerAdmin) SetServerMode(ctx context.Context, mode driver.ServerMode) error {
	ret := _m.Called(ctx, mode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, driver.ServerMode) error); ok {
		r0 = rf(ctx, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx, removeFromCluster
func (_m *ClientServerAdmin) Shutdown(ctx context.Context, removeFromCluster bool) error {
	ret := _m.Called(ctx, removeFromCluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, removeFromCluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
